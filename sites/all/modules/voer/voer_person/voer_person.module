<?php

function voer_person_menu(){
  $items = array();
  $items['person/%person'] = array(
    'page callback' => 'show_person_page',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );

  $items['person/all'] = array(
    'title' => t('List authors'),
    'page callback' => 'show_person_list_page',
    'access arguments' => array('access content'),
  );

  $items['person/search'] = array(
    'page callback' => 'search_person_by_keyword',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['person/info'] = array(
    'page callback' => 'load_person_info',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['person/register'] = array(
    'page callback' => '_voer_person_register',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function voer_person_theme(){
  return array(
    'voer_person_view' => array(
      'arguments' => array('person' => array()),
      'render element' => 'element',
      'template' => 'templates/voer-person-view',
    ),
  );
}

function person_load($id = NULL){
  module_load_include('inc', 'voer_api');
  $person = voer_api_get_author($id);
  if (isset($person->id)){
    return $person;
  }else{
    return NULL;
  }
}

function show_person_page($person){
  module_load_include('inc', 'voer_api');

  if (!$person) {
    return t("Author is not found!");
  }
  $materials = voer_api_get_materials_by_authors(array($person->id));
  $person->material_count = $materials->count;

  return theme("voer_person_view", (array) $person) . drupal_render(show_materials_by_authors($person));
}

function show_materials_by_authors($person){
  module_load_include('inc', 'voer_api');

  try {
    $page = isset($_GET['page']) ? $_GET['page'] : 0;
    $materials = voer_api_get_materials_by_authors(array($person->id), $page + 1);
    if ($materials->count == 0){
      return t("Materials not found!");
    }else{
      $nodes = array();
      pager_default_initialize($materials->count, 10);
      foreach ($materials->results as $key => $material) {
        $node = new stdClass();
        $node->type = 'voer_module';
        node_object_prepare($node);
        $node->title = $material->title;
        $node->material_id = $material->material_id;
        $node->nid = $key;
        $node->comment = 0;
        $node->field_voer_description[LANGUAGE_NONE][0]['value'] = $material->description;
        $nodes[] = $node;
      }
      $output = node_view_multiple($nodes);
      $output['pager'] = array('#markup' => theme('pager'));
      return $output;
    }
  } catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
    return "";
  }
}

function show_person_list_page(){
  module_load_include('inc', 'voer_api');
  try {
    $page = isset($_GET['page']) ? $_GET['page'] : 0;
    $authors = voer_api_get_all_authors($page + 1);
    if ($authors->count == 0){
      return t("Author not found!");
    }else{
      $nodes = array();
      pager_default_initialize($authors->count, 10);
      foreach ($authors->results as $key => $author) {
        $node = new stdClass();
        $node->type = 'person';
        node_object_prepare($node);

        if (isset($author->fullname)) {
          $node->title = $author->fullname;
        } else {
          $node->title = $author->user_id;
        }

        $node->person_id = $author->id;
        $node->nid = $key;
        $node->comment = 0;
        if (isset($author->biography)) {
          $node->body[LANGUAGE_NONE][0]['value'] = $author->biography;
        }
        $nodes[] = $node;
      }
      $output = node_view_multiple($nodes);
      $output['pager'] = array('#markup' => theme('pager'));
      return $output;
    }
  } catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
    return "";
  }
}

function search_person_by_keyword()
{
  $keyword = $_POST['keyword'];
  $page = isset($_POST['page']) ? $_POST['page'] : 1;
  $author_selected_list = isset($_POST['author_list']) ? $_POST['author_list'] : 1;

  $author_selected_array = explode(',', $author_selected_list);

  module_load_include('inc', 'voer_api');
  $authors = voer_api_search_on_person($keyword, $page);

  if ($authors->count > 0) {
    $row_data = array();

    foreach ($authors->results as $author) {
      $user_name = $author->fullname ? $author->fullname : $author->user_id;

      $row_data_tmp = array();
      $row_data_tmp[] = array(
        'data' => theme('html_tag', array('element' => array(
          '#type' => 'html_tag',
          '#tag' => 'span',
          '#value' => l($user_name, 'person/'.$author->id, array('attributes' => array('target' => '_blank'))),
        ))),
      );

      if (in_array($author->id, $author_selected_array)) {
        $class_name = 'display_none';
      } else {
        $class_name = '';
      }

      $row_data_tmp[] = array(
        'data' => theme('html_tag', array('element' => array(
          '#type' => 'html_tag',
          '#tag' => 'div',
          '#attributes' => array(
            'class' => array($class_name),
          ),
          '#value' => '<span class="voer-add-authors" rel="'.$author->id.'"></span>'
        ))),
        'class' => 'voer-add-authors-'.$author->id,
      );

      $row_data[] = $row_data_tmp;
    }

    $header = array(t('Name'), t('Add'));
    $table_attributes = array('id' => 'voer-author-table-list', 'align' => 'center');
    $author_table_list = theme('table', array('header' => $header, 'rows' => $row_data, 'attributes' => $table_attributes, 'sticky' => FALSE, 'empty' => t('No data.')));

    $next_button = array();
    $prev_button = array();

    if ($authors->next) {
      $next_button = array(
        '#type' => 'button',
        '#value' => 'Next',
        '#attributes' => array(
          'class' => array('author_next_btn'),
          'page' => $page + 1,
          'keyword' => check_plain($keyword),
          'onclick' => 'loadAuthorSearchPage(this)',
        ),
      );
    }

    if ($authors->previous) {
      $prev_button = array(
        '#type' => 'button',
        '#value' => 'Prev',
        '#attributes' => array(
          'class' => array('author_prev_btn'),
          'page' => $page - 1,
          'keyword' => check_plain($keyword),
          'onclick' => 'loadAuthorSearchPage(this)',
        ),
      );
    }

    echo $author_table_list . drupal_render($prev_button) . drupal_render($next_button);

  } else {
    echo t('No result');
  }
}

function load_person_info()
{
  $author_id = $_GET['author_id'];
  module_load_include('inc', 'voer_api');
  $author = (array)voer_api_get_author($author_id);
  if (!isset($author['detail'])) {
    echo drupal_json_encode($author);
  }
  echo '';
}

/**
 * Implements of hook_user_presave()
 */
function voer_person_user_presave(&$edit, &$account, $category = NULL)
{
  module_load_include('inc', 'voer_api');

  if (count($edit) > 1 && isset($edit['status']) && !isset($edit['data'])) {
    $author = array();
    $author['email'] = $edit['mail'];
    $author['user_id'] = $edit['name'];

    if (isset($edit['field_person_fullname'][LANGUAGE_NONE][0]['value'])) {
      $author['fullname'] = $edit['field_person_fullname'][LANGUAGE_NONE][0]['value'];
    }

    if (isset($edit['field_person_first_name'][LANGUAGE_NONE][0]['value'])) {
      $author['first_name'] = $edit['field_person_first_name'][LANGUAGE_NONE][0]['value'];
    }

    if (isset($edit['field_person_last_name'][LANGUAGE_NONE][0]['value'])) {
      $author['last_name'] = $edit['field_person_last_name'][LANGUAGE_NONE][0]['value'];
    }

    if (isset($edit['field_person_title'][LANGUAGE_NONE][0]['value'])) {
      $author['title'] = $edit['field_person_title'][LANGUAGE_NONE][0]['value'];
    }

    if (isset($edit['field_person_homepage'][LANGUAGE_NONE][0]['value'])) {
      $author['homepage'] = $edit['field_person_homepage'][LANGUAGE_NONE][0]['value'];
    }

    if (isset($edit['field_person_affiliation'][LANGUAGE_NONE][0]['value'])) {
      $author['affiliation'] = $edit['field_person_affiliation'][LANGUAGE_NONE][0]['value'];
    }

    if (isset($edit['field_person_affiliation_url'][LANGUAGE_NONE][0]['value'])) {
      $author['affiliation_url'] = $edit['field_person_affiliation_url'][LANGUAGE_NONE][0]['value'];
    }

    if (isset($edit['field_person_national'][LANGUAGE_NONE][0]['value'])) {
      $author['national'] = $edit['field_person_national'][LANGUAGE_NONE][0]['value'];
    }

    if (isset($edit['field_person_biography'][LANGUAGE_NONE][0]['value'])) {
      $author['biography'] = $edit['field_person_biography'][LANGUAGE_NONE][0]['value'];
    }

    if (isset($edit['field_person_client_id'][LANGUAGE_NONE][0]['value'])) {
      $author['client_id'] = $edit['field_person_client_id'][LANGUAGE_NONE][0]['value'];
    }

    if (isset($edit['field_person_id'][LANGUAGE_NONE][0]['value']) && $edit['field_person_id'][LANGUAGE_NONE][0]['value']) {
      $author['id'] = $edit['field_person_id'][LANGUAGE_NONE][0]['value'];
      voer_api_update_author($author);
    } else {
      $new_author = voer_api_create_author($author);
      $edit['field_person_id'][LANGUAGE_NONE][0]['value'] = $new_author->id;
    }
  }
}

function voer_person_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($form_id == 'user_profile_form') {
    $form['field_person_id']['#access'] = FALSE;
    $form['field_person_client_id']['#access'] = FALSE;

    if (!in_array('administrator', $user->roles)) {
      $form['overlay_control']['#access'] = FALSE;
    }
  }
}

function _voer_person_register()
{
  //set up the user fields
  $fields = array(
    'name' => $_REQUEST['name'],
    'mail' => $_REQUEST['mail'],
    'field_person_fullname' => array(LANGUAGE_NONE => array(0 => array('value' => $_REQUEST['fullname']))),
    'pass' => user_password(8),
    'status' => 1,
    'init' => $_REQUEST['mail'],
    'roles' => array(
      DRUPAL_AUTHENTICATED_RID => TRUE,
    ),
  );

  $result = array();
  $result['status'] = FALSE;

  if (user_validate_name($fields['name'])) {
    $result['message'] = user_validate_name($fields['name']);
  } elseif (_voer_person_validate_username($fields['name'])) {
    $result['message'] = t('Username is exists.');
  } elseif (user_validate_mail($fields['mail'])) {
    $result['message'] = user_validate_mail($fields['mail']);
  } elseif (_voer_person_validate_mail($fields['mail'])) {
    $result['message'] = t('The e-mail address @mail is already taken', array('@mail' => $fields['mail']));
  } else {
    $account = user_save('', $fields);
    $field_person_id = $account->field_person_id;
    $result['status'] = TRUE;
    $result['message'] = $field_person_id[LANGUAGE_NONE][0]['value'];
    $account->password = $fields['pass'];

    // Send the e-mail through the user module.
    drupal_mail('user', 'register_no_approval_required', $fields['mail'], NULL, array('account' => $account), variable_get('site_mail', 'noreply@example.com'));
  }

  return drupal_json_output($result);
}

function _voer_person_validate_username($username) {
  if (db_query("SELECT COUNT(*) FROM {users} WHERE name = :name", array(':name' => $username))->fetchField()) {
    return TRUE;
  }

  return FALSE;
}

function _voer_person_validate_mail($email) {
  if (db_query("SELECT COUNT(*) FROM {users} WHERE mail = :mail", array(':mail' => $email))->fetchField()) {
    return TRUE;
  }

  return FALSE;
}

function voer_person_preprocess_node(&$variables){
  $type = $variables['type'];
  if ($type == 'person'){
    if (isset($variables['person_id'])){
      $module_path =  "person/" . $variables['person_id'];
      $variables['display_submitted'] = FALSE;
      $variables['node_url'] = base_path() . $module_path;
      $variables['content']['links']['node']['#links']['node-readmore']['href'] = $module_path;
    }
  }
}
