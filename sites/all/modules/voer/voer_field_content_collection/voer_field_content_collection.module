<?php
/**
 * @file
 * An example field using the Field Types API.
 */


/**
 * Implementation of hook_init().
 */
function voer_field_content_collection_init() {
  drupal_add_js(array(
    'voer_field_content_collection' => array(
      'path' =>  drupal_get_path('module', 'voer_field_content_collection')
    )
  ), 'setting');
}

/***************************************************************
 * Field Type API hooks
 ***************************************************************/

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function voer_field_content_collection_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'field_voer_content_collection' => array(
      'label' => t('Collection Outline'),
      'description' => t('Collection Outline'),
      'allowed_values_function' => 'voer_field_content_collection_allowed_values',
      'default_widget' => 'field_voer_content_outline',
      'default_formatter' => 'list_default',
    ),
  );
}

/**
 * Implements hook_widget_info_alter().
 *
 */
function voer_field_content_collection_field_widget_info_alter(&$info) {
  $widgets = array(
    'options_select' => array('field_voer_categories'),
  );
  foreach ($widgets as $widget => $field_types) {
    $info[$widget]['field types'] = array_merge($info[$widget]['field types'], $field_types);
  }
}

/**
 * Implements hook_options_list()
 *
 */
function voer_field_content_collection_options_list($field, $instance, $entity_type, $entity) {
  module_load_include('inc', 'voer_api');
  $categories = voer_api_get_all_categories();
  $list = array();
  if (isset($categories) && isset($categories->results)){
    foreach ($categories->results as $category) {
      $list[$category->id] = $category->name;
    }
  }
  return $list;
}

function voer_field_content_collection_allowed_values($field, $instance, $entity_type, $entity, $cacheable = TRUE){
  module_load_include('inc', 'voer_api');
  $categories = voer_api_get_all_categories();
  $list = array();
  if (isset($categories) && isset($categories->results)){
    foreach ($categories->results as $category) {
      $list[$category->id] = $category->name;
    }
  }
  return $list;
}

/**
 * Implements hook_field_validate().
 *
 * This hook gives us a chance to validate content that's in our
 * field. We're really only interested in the $items parameter, since
 * it holds arrays representing content in the field we've defined.
 * We want to verify that the items only contain RGB hex values like
 * this: #RRGGBB. If the item validates, we do nothing. If it doesn't
 * validate, we add our own error notification to the $errors parameter.
 *
 * @see field_example_field_widget_error()
 */
// function voer_field_content_collection_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
//   foreach ($items as $delta => $item) {
//     if (!empty($item['value'])) {
//       if (! preg_match('@^#[0-9a-f]{6}$@', $item['value'])) {
//         $errors[$field['field_name']][$langcode][$delta][] = array(
//           'error' => 'field_example_invalid',
//           'message' => t('Color must be in the HTML format #abcdef.'),
//         );
//       }
//     }
//   }
// }


/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function voer_field_content_collection_field_is_empty($item, $field) {
  return empty($item['value']);
}

/**
 * Implements hook_field_widget_info().
 *
 * Three widgets are provided.
 * - A simple text-only widget where the user enters the '#ffffff'.
 * - A 3-textfield widget that gathers the red, green, and blue values
 *   separately.
 * - A farbtastic colorpicker widget that chooses the value graphically.
 *
 * These widget types will eventually show up in hook_field_widget_form,
 * where we will have to flesh them out.
 *
 * @see field_example_field_widget_form()
 */
function voer_field_content_collection_field_widget_info() {
  return array(
    'field_voer_content_outline' => array(
      'label' => t('Outline'),
      'field types' => array('field_voer_content_collection'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 * We provide one of three different forms, depending on the widget type of
 * the Form API item provided.
 *
 * The 'field_example_colorpicker' and 'field_example_text' are essentially
 * the same, but field_example_colorpicker adds a javascript colorpicker
 * helper.
 *
 * field_example_3text displays three text fields, one each for red, green,
 * and blue. However, the field type defines a single text column,
 * rgb, which needs an HTML color spec. Define an element validate
 * handler that converts our r, g, and b fields into a simulated single
 * 'rgb' form element.
 */
function voer_field_content_collection_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // $value = isset($items[$delta]['value']) ? $items[$delta]['value'] : '';
  // $multiple = $field['cardinality'] > 1 || $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED;
  // $required = $element['#required'];
  $value = isset($items[$delta]['value']) ? $items[$delta]['value'] : '';

  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {

    case 'field_voer_content_outline':

      $widget += array(
        '#type' => 'container',
        '#attributes' => array("id" => "voer-outline-wrapper"),
        '#attached' => array(
          'css' => array(drupal_get_path('module', 'voer_field_content_collection') . '/voer_field_content_collection.css'),
          'js' => array(
                    drupal_get_path('module', 'voer_field_content_collection') . '/js/jquery.jstree.js',
                    drupal_get_path('module', 'voer_field_content_collection') . '/js/jquery.cookie.js',
                    drupal_get_path('module', 'voer_field_content_collection') . '/js/jquery.hotkeys.js',
                    drupal_get_path('module', 'voer_field_content_collection') . '/js/main.js'
                  ),
        ),
      );

      $widget['actions'] = array('#type' => 'actions', '#weight' => 0, '#attributes' => array('id' => 'outline-actions'));
      $widget['actions']['add_folder'] = array(
        '#type' => 'button',
        '#attributes' => array('id' => 'add_folder'),
        '#value' => t('Add folder'),
      );
      $widget['actions']['add_module'] = array(
        '#type' => 'button',
        '#attributes' => array('id' => 'add_default'),
        '#value' => t('Add module'),
      );
      $widget['actions']['rename'] = array(
        '#type' => 'button',
        '#attributes' => array('id' => 'rename'),
        '#value' => t('Rename'),
      );
      $widget['actions']['remove'] = array(
        '#type' => 'button',
        '#attributes' => array('id' => 'remove'),
        '#value' => t('Remove'),
      );
      $widget['actions']['info'] = array(
        '#type' => 'button',
        '#attributes' => array('id' => 'info'),
        '#value' => t('Info'),
      );

      $widget['outline'] = array(
        '#type' => 'markup',
        '#prefix' => '<div id="collection-outline" class="demo" style="height:300px;"></div>',
        '#weight' => -1,
      );

      $widget['outline_text'] = array(
        '#type' => 'hidden',
        '#default_value' => $value,
        '#attributes' => array(
          'class' => array('voer-outline-text'),
        ),
      );

      $widget['module_keyword'] = array(
        '#type' => 'textfield',
        '#description' => t('Select people to serve as authors.'),
        '#attributes' => array(
          'placeholder' => t('Please enter keyword'),
          'class' => array('voer-module-search-text'),
        ),
      );

      $widget['module_search_btn'] = array(
        '#type' => 'button',
        '#value' => t('Search'),
        '#attributes' => array(
          'class' => array('voer-module-search-btn'),
        ),
      );

      break;

  }

  $element['value'] = $widget;

  return $element;
}

function field_voer_content_outline_validate($element, &$form_state) {
  $delta = $element['#delta'];
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $field_name = $field['field_name'];

  if (isset($form_state['values'][$field_name][$element['#language']][$delta]['value'])) {
    $value = $form_state['values'][$field_name][$element['#language']][$delta]['value']['outline_text'];
    form_set_value($element, $value, $form_state);
  }
}

/**
 * @} End of "defgroup field_example".
 */
