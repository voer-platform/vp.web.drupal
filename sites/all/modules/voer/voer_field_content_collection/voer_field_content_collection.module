<?php
/**
 * @file
 * An example field using the Field Types API.
 */


/**
 * Implementation of hook_init().
 */
function voer_field_content_collection_init() {
  drupal_add_js(array(
    'voer_field_content_collection' => array(
      'path' =>  drupal_get_path('module', 'voer_field_content_collection')
    )
  ), 'setting');
}

/***************************************************************
 * Field Type API hooks
 ***************************************************************/

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function voer_field_content_collection_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'field_voer_content_collection' => array(
      'label' => t('Collection Outline'),
      'description' => t('Collection Outline'),
      'allowed_values_function' => 'voer_field_content_collection_allowed_values',
      'default_widget' => 'field_voer_content_outline',
      'default_formatter' => 'list_default',
    ),
  );
}


/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function voer_field_content_collection_field_is_empty($item, $field) {
  return empty($item['value']);
}

/**
 * Implements hook_field_widget_info().
 *
 * Three widgets are provided.
 * - A simple text-only widget where the user enters the '#ffffff'.
 * - A 3-textfield widget that gathers the red, green, and blue values
 *   separately.
 * - A farbtastic colorpicker widget that chooses the value graphically.
 *
 * These widget types will eventually show up in hook_field_widget_form,
 * where we will have to flesh them out.
 *
 * @see field_example_field_widget_form()
 */
function voer_field_content_collection_field_widget_info() {
  return array(
    'field_voer_content_outline' => array(
      'label' => t('Outline'),
      'field types' => array('field_voer_content_collection'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 * We provide one of three different forms, depending on the widget type of
 * the Form API item provided.
 *
 * The 'field_example_colorpicker' and 'field_example_text' are essentially
 * the same, but field_example_colorpicker adds a javascript colorpicker
 * helper.
 *
 * field_example_3text displays three text fields, one each for red, green,
 * and blue. However, the field type defines a single text column,
 * rgb, which needs an HTML color spec. Define an element validate
 * handler that converts our r, g, and b fields into a simulated single
 * 'rgb' form element.
 */
function voer_field_content_collection_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // $value = isset($items[$delta]['value']) ? $items[$delta]['value'] : '';
  // $multiple = $field['cardinality'] > 1 || $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED;
  // $required = $element['#required'];
  $value = isset($items[$delta]['value']) ? $items[$delta]['value'] : '';

  //Convert
  $objValue = json_decode($value);
  if ($objValue){
    $result = array();
    foreach ($objValue->content as $item) {
      $result[] = _transform_json_vpr_to_editor($item);
    }
    $value = json_encode($result);
    //Them root node
    $value = '[{"attr":{"id":"root-outline","rel":"root"},"data":"Outline","state":"open","children": '. $value . '}]';
  }
  // dpm($value);
  if ($value == ""){
    $value = '[{"attr":{"id":"root-outline","rel":"root"},"data":"Outline","state":"open"}]';
  }
  // dpm($value);


  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {

    case 'field_voer_content_outline':

      $widget += array(
        '#type' => 'container',
        '#element_validate' => array('field_voer_content_outline_validate'),
        '#attributes' => array("id" => "voer-outline-wrapper"),
        '#attached' => array(
          'css' => array(drupal_get_path('module', 'voer_field_content_collection') . '/voer_field_content_collection.css'),
          'js' => array(
                    drupal_get_path('module', 'voer_field_content_collection') . '/js/jquery.jstree.js',
                    drupal_get_path('module', 'voer_field_content_collection') . '/js/jquery.cookie.js',
                    drupal_get_path('module', 'voer_field_content_collection') . '/js/jquery.hotkeys.js',
                    drupal_get_path('module', 'voer_field_content_collection') . '/js/jquery.leanModal.min.js',
                    drupal_get_path('module', 'voer_field_content_collection') . '/js/main.js'
                  ),
        ),
      );

      $widget['actions'] = array('#type' => 'actions', '#weight' => 0, '#attributes' => array('id' => 'outline-actions'));
      $widget['actions']['add_folder'] = array(
        '#type' => 'html_tag',
        '#tag' => 'a',
        '#attributes' => array('id' => 'add_folder', 'href' => '#add_folder_form', 'rel' => 'leanModal', 'class' => 'button'),
        '#value' => t('Create subsections'),
      );
      $widget['actions']['add_module'] = array(
        '#type' => 'button',
        '#attributes' => array('id' => 'add_default'),
        '#value' => t('Add module'),
      );
      $widget['actions']['rename'] = array(
        '#type' => 'button',
        '#attributes' => array('id' => 'rename'),
        '#value' => t('Rename'),
      );
      $widget['actions']['remove'] = array(
        '#type' => 'button',
        '#attributes' => array('id' => 'remove'),
        '#value' => t('Remove'),
      );
      // $widget['actions']['info'] = array(
      //   '#type' => 'button',
      //   '#attributes' => array('id' => 'info'),
      //   '#value' => t('Info'),
      // );

      $widget['outline'] = array(
        '#type' => 'markup',
        '#prefix' => '<div id="collection-outline" class="demo" style="height:300px;"></div>',
        '#weight' => -1,
      );

      $widget['add_folder_form'] = array(
        '#type' => 'markup',
        '#prefix' => '<div id="add_folder_form">
                        <div id="add_folder_form_header">
                            <h2>'.t('Create new subsections').'</h2>
                            <p>'.t('Enter a subsection per line').'</p>
                            <a href="javascript:void(0)" class="modal_close"></a>
                        </div>

                        <form action="">
                            <div class="txt-fld">
                              <textarea name="sub_session" id="voer_sub_sessions"></textarea>
                            </div>
                            <div class="btn-fld">
                                <button id="btn_add_folder" type="submit">'.t('Create').'</button>
                            </div>
                        </form>
                      </div>
        ',
        '#weight' => -1,
      );

      $widget['outline_text'] = array(
        '#type' => 'hidden',
        '#default_value' => $value,
        '#attributes' => array(
          'class' => array('voer-outline-text'),
        ),
      );

      $widget['module_keyword'] = array(
        '#type' => 'textfield',
        '#description' => t('Enter keyword to search module.'),
        '#attributes' => array(
          'placeholder' => t('Please enter keyword'),
          'class' => array('voer-module-search-text'),
        ),
      );

      $widget['module_search_btn'] = array(
        '#type' => 'button',
        '#value' => t('Search'),
        '#attributes' => array(
          'class' => array('voer-module-search-btn'),
        ),
      );

      break;

  }

  $element['value'] = $widget;

  return $element;
}

function field_voer_content_outline_validate($element, &$form_state) {
  $delta = $element['#delta'];
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $field_name = $field['field_name'];

  if (isset($form_state['values'][$field_name][$element['#language']][$delta]['value'])) {
    $value = $form_state['values'][$field_name][$element['#language']][$delta]['value']['outline_text'];
    // dpm($value);
    // Transform
    $objValue = json_decode($value);
    // dpm($objValue[0]);
    $result = new stdClass();
    $result->content = array();
    //Bo qua root node
    foreach ($objValue[0]->children as $item) {
      $result->content[] = _transform_json_editor_to_vpr($item);
    }
    $value = json_encode($result);
    // dpm($value);
    form_set_value($element, $value, $form_state);
  }
}

function _transform_json_editor_to_vpr($obj){
  $type = $obj->attr->rel;
  $result = new stdClass();
  if ($type == "module"){
    $result->title = $obj->data;
    $tmpid = $obj->attr->id;
    $pies = explode("|", $tmpid);
    $result->id = $pies[0];
    $result->version = $pies[1];
    $result->type = 'module';
    $result->url = "http://voer.edu.vn/m/" . $result->id . "/" . $result->version;
    $result->license = "http://creativecommons.org/licenses/by/3.0/";
  }else if ($type == "bundle"){
    $result->title = $obj->data;
    $result->type = 'subcollection';
    $result->content = array();
    foreach ($obj->children as $item) {
      $result->content[] = _transform_json_editor_to_vpr($item);
    }
  }
  return $result;
}

function _transform_json_vpr_to_editor($obj){
  $type = $obj->type;
  $result = new stdClass();
  $result->attr = new stdClass();
  if ($type == "module"){
    $result->data = $obj->title;
    $result->attr->id = $obj->id . "|" . $obj->version;
    $result->attr->rel = 'module';
  }else if ($type == "subcollection"){
    $result->data = $obj->title;
    $result->attr->rel = 'bundle';
    $result->children = array();
    foreach ($obj->content as $item) {
      $result->children[] = _transform_json_vpr_to_editor($item);
    }
  }
  return $result;
}

/**
 * @} End of "defgroup field_example".
 */
