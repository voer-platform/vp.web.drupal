<?php
define('VOER_MATERIAL_TYPE_TEXT', 1);
define('VOER_MATERIAL_TYPE_VIDEO', 2);

define('VOER_MATERIAL_LICENSE_FORM', 'material_license_form');
define('VOER_MATERIAL_METADATA_FORM', 'material_metadata_form');
define('VOER_MATERIAL_CONTENT_FORM', 'material_content_form');


function voer_material_type($type_id){
  $types = array(1 => "voer_module", 2 => "voer_collection");
  return $types[$type_id];
}

function voer_content_entity_info_alter(&$entity_info) {
  $entity_info['node']['uri callback'] = 'voer_content_uri';
}

function voer_content_uri($node){
  if ($node->type == "voer_collection"){
    return array("path" => "collection/" . $node->nid);
  }else{
    return array("path" => "node/". $node->nid);
  }
}
/**
 * Implements hook_admin_paths
 * @return [type] [description]
 */
function voer_content_admin_paths(){
  $paths = array(
    'node/*/clone' => TRUE
  );
  return $paths;
}

/**
 * Implements hook_menu_alter().
 */
function voer_content_menu_alter(&$items) {
  // Modify add voer module
  $items['node/add/voer-module']['page callback'] = 'voer_module_creation';
  $items['node/add/voer-module']['file'] =  'voer_content_module.inc';
  $items['node/add/voer-module']['file path'] = drupal_get_path('module', 'voer_content');

  // Modify add voer collection
  $items['node/add/voer-collection']['page callback'] = 'voer_collection_creation';
  $items['node/add/voer-collection']['file'] =  'voer_content_collection.inc';
  $items['node/add/voer-collection']['file path'] = drupal_get_path('module', 'voer_content');

  // Modify add voer course
  $items['node/add/voer-course']['page callback'] = 'voer_course_creation';
  $items['node/add/voer-course']['file'] =  'voer_content_course.inc';
  $items['node/add/voer-course']['file path'] = drupal_get_path('module', 'voer_content');

  $items['node/%node/edit']['access callback'] = 'voer_module_disable_node_edit';
  $items['node/%node/edit']['access arguments'] = array(1);
}

function voer_module_disable_node_edit($node){
  if ($node->type == 'voer_module' || $node->type == 'voer_collection'){
    if (sizeof($node->field_voer_material_version) && !empty($node->field_voer_material_version[LANGUAGE_NONE][0]['value'])){
      return false;
    }else{
      return true;
    }
  }
}

/**
 * Implements hook_menu().
 */
function voer_content_menu() {
  $items = array();

  $items['collection/%node'] = array(
    'title callback' => 'voer_collection_title',
    'title arguments' => array(1),
    'page callback' => 'show_collection',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'file' => 'voer_content.pages.inc',
  );


  $items['category/%voer_category'] = array(
    'title callback' => 'voer_category_title',
    'title arguments' => array(1),
    'page callback' => 'show_materials_by_category',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'file' => 'voer_content.pages.inc',
  );

  $items['node/%node/clone'] = array(
    'access callback' => 'voer_content_clone_access',
    'access arguments' => array(1),
    // 'access arguments' => array('access content'),
    'page callback' => 'voer_content_clone',
    'page arguments' => array(1),
    'title' => 'Checkout',
    // 'title callback' => 'clone_action_link_title',
    // 'title arguments' => array(1),
    'weight' => 5,
    'file' => 'voer_content.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['node/%node/pdf'] = array(
    'access callback' => 'voer_content_pdf_access',
    'access arguments' => array(1),
    'page callback' => 'voer_content_pdf',
    'page arguments' => array(1),
    'title' => 'PDF',
    'file' => 'voer_content.pages.inc',
  );


  $items['collection/%node/clone'] = array(
    'access callback' => 'voer_content_clone_access',
    'access arguments' => array(1),
    // 'access arguments' => array('access content'),
    'page callback' => 'voer_content_clone',
    'page arguments' => array(1),
    'title' => 'Checkout',
    // 'title callback' => 'clone_action_link_title',
    // 'title arguments' => array(1),
    'weight' => 5,
    'file' => 'voer_content.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  return $items;
}

function voer_content_pdf_access($node){
  global $user;
  if (sizeof($node->field_voer_material_version) > 0 || !empty($node->field_voer_material_version[LANGUAGE_NONE][0]['value'])){
    return true;
  }else{
    return false;
  }
}

function voer_content_clone_access($node){
  global $user;
  if (sizeof($node->field_voer_material_version) > 0 || !empty($node->field_voer_material_version[LANGUAGE_NONE][0]['value'])){
    if ($user->uid > 0){
      return true;
    }
  }else{
    return false;
  }
}

function voer_content_preprocess_node(&$variables){
  $type = $variables['type'];
  if ($type == 'voer_module' || $type == 'voer_collection'){
    $variables['page'] = $variables['view_mode'] == 'full';
    if (isset($variables['material_id'])){
      $module_path =  "m/" . $variables['material_id'];
      $variables['node_url'] = base_path() . $module_path;
      $variables['content']['links']['node']['#links']['node-readmore']['href'] = $module_path;
    }
  }

  if (arg(0) == 'node' || arg(0) == 'collection') {
    $navigation = array('prev_url' => '', 'home_url' => '', 'next_url' => '');

    if (arg(1)) {
      $node = node_load(arg(1));
      $outline = $node->field_voer_outline[$node->language][0]['value'];
      $outline = json_decode($outline);

      if ($node->type == 'voer_collection' && isset($outline->content)) {
        $navFlat = array();
        _get_collection_navigation($outline->content, $navFlat);
        $current_module_id = $variables['field_voer_material_id'][0]['value'];
        $navigation['home_url'] = l(t('Home'), 'collection/' . arg(1));

        if ($navFlat[0] == $current_module_id) {
          $navigation['next_url'] = l(t('Next →'), 'collection/' . arg(1) . "/" . $navFlat[1]);
        } else {
          $pos = array_search($current_module_id, $navFlat);
          if (isset($navFlat[$pos-1])) {
            $navigation['prev_url'] = l(t('← Prev'), 'collection/' . arg(1) . "/" . $navFlat[$pos-1]);
          }

          if (isset($navFlat[$pos+1])) {
            $navigation['next_url'] = l(t('Next →'), 'collection/' . arg(1) . "/" . $navFlat[$pos+1]);
          }
        }

        $variables['navigation'] = $navigation;
      }
    }
  }
}

function voer_category_load($id = NULL, $reset = FALSE){
  module_load_include('inc', 'voer_api');
  try {
    $c = voer_api_get_category($id);
    return $c;
  } catch (Exception $e) {
    return FALSE;
  }
}

/**
 * [voer_content_title description]
 * @param  [type] $content [description]
 * @return [type]          [description]
 */
function voer_content_title($content){
  return $content->title;
}

function voer_collection_title($node){
  return $node->title;
}


// HUY.VQ --------------------------------

/**
 * Implements hook_form_alter().
 */
function voer_content_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'voer_module_node_form') {
    voer_content_module_form_alter($form, $form_state, $form_id);
  }else if ($form_id == 'voer_collection_node_form'){
    // dpm($form_id);
    voer_content_collection_form_alter($form, $form_state, $form_id);
  }

  return $form;
}

function voer_content_module_form_alter(&$form, &$form_state, $form_id){
  global $user;
  $node = $form['#node'];

  //hide if user has not roles
  if (!in_array('administrator', $user->roles)) {
    $form['menu']['#access'] = FALSE;
    $form['revision_information']['#access'] = false;
    $form['options']['#access'] = false;
    $form['comment_settings']['#access'] = false;
    $form['author']['#access'] = false;
    $form['path']['#access'] = false;
  }

  $body_weight = $form['body']['#weight'];

  $form['title']['#weight'] = 0;

  $form['import_file'] = array(
    '#type' => 'file',
    '#title' => t('Document for import'),
    '#description' => t('Upload a file, allowed extensions: doc, docx, odt'),
    '#weight' => 2,
  );
  $form['upload_file'] = array(
    '#type' => 'button',
    '#weight' => 3,
    '#value' => t('Import'),
    '#validate' => array('voer_module_import_validate'),
  );

  $form['language'] = array(
    '#type' => 'fieldset',
    '#title' => t('Language'),
    '#group' => 'additional_settings',
    '#weight' => -110,
    'field_voer_language' => $form['field_voer_language'],
  );

  $form['description'] = array(
    '#type' => 'fieldset',
    '#title' => t('Description'),
    '#group' => 'additional_settings',
    '#weight' => -100,
    'field_voer_description' => $form['field_voer_description'],
  );
  $form['categories'] = array(
    '#type' => 'fieldset',
    '#title' => t('Categories'),
    '#group' => 'additional_settings',
    '#weight' => -95,
    'field_voer_categories' => $form['field_voer_categories'],
  );
  $form['authors'] = array(
    '#type' => 'fieldset',
    '#title' => t('Authors'),
    '#group' => 'additional_settings',
    '#weight' => -92,
    'field_voer_authors' => $form['field_voer_authors'],
  );
  $form['keywords'] = array(
    '#type' => 'fieldset',
    '#title' => t('Keywords'),
    '#group' => 'additional_settings',
    '#weight' => -90,
    'field_voer_keywords' => $form['field_voer_keywords'],
  );
  $form['version'] = array(
    '#type' => 'fieldset',
    '#title' => t('Version'),
    '#group' => 'additional_settings',
    '#weight' => -85,
  );
  $form['version']['field_voer_material_id'] = $form['field_voer_material_id'];
  $form['version']['field_voer_material_id'][LANGUAGE_NONE][0]['#disabled'] = TRUE;
  $form['version']['field_voer_material_version'] = $form['field_voer_material_version'];
  $form['version']['field_voer_material_version'][LANGUAGE_NONE][0]['#disabled'] = TRUE;


  // unset($form['title']);
  unset($form['field_voer_description']);
  unset($form['field_voer_authors']);
  unset($form['field_voer_categories']);
  unset($form['field_voer_language']);
  unset($form['field_voer_file']);
  unset($form['field_voer_material_type']);
  unset($form['field_voer_material_id']);
  unset($form['field_voer_material_version']);
  unset($form['field_voer_keywords']);

  if (sizeof($node->field_voer_material_version) == 0 || empty($node->field_voer_material_version[LANGUAGE_NONE][0]['value'])){
    $form['actions']['publish'] = array(
      '#type'=> 'submit',
      '#value'=> 'Publish',
      '#weight'=> 11,
      '#submit' => array('voer_content_form_push'),
    );
  }
}

function voer_content_collection_form_alter(&$form, &$form_state, $form_id){
  global $user;
  $node = $form['#node'];

  //hide if user has not roles
  if (!in_array('administrator', $user->roles)) {
    $form['menu']['#access'] = FALSE;
    $form['revision_information']['#access'] = false;
    $form['options']['#access'] = false;
    $form['comment_settings']['#access'] = false;
    $form['author']['#access'] = false;
    $form['path']['#access'] = false;
  }

  $body_weight = $form['body']['#weight'];

  $form['title']['#weight'] = 0;

  $form['language'] = array(
    '#type' => 'fieldset',
    '#title' => t('Language'),
    '#group' => 'additional_settings',
    '#weight' => -110,
    'field_voer_language' => $form['field_voer_language'],
  );

  $form['description'] = array(
    '#type' => 'fieldset',
    '#title' => t('Description'),
    '#group' => 'additional_settings',
    '#weight' => -100,
    'field_voer_description' => $form['field_voer_description'],
  );
  $form['categories'] = array(
    '#type' => 'fieldset',
    '#title' => t('Categories'),
    '#group' => 'additional_settings',
    '#weight' => -95,
    'field_voer_categories' => $form['field_voer_categories'],
  );
  $form['authors'] = array(
    '#type' => 'fieldset',
    '#title' => t('Authors'),
    '#group' => 'additional_settings',
    '#weight' => -92,
    'field_voer_authors' => $form['field_voer_authors'],
  );
  $form['keywords'] = array(
    '#type' => 'fieldset',
    '#title' => t('Keywords'),
    '#group' => 'additional_settings',
    '#weight' => -90,
    'field_voer_keywords' => $form['field_voer_keywords'],
  );
  $form['version'] = array(
    '#type' => 'fieldset',
    '#title' => t('Version'),
    '#group' => 'additional_settings',
    '#weight' => -85,
  );
  $form['version']['field_voer_material_id'] = $form['field_voer_material_id'];
  $form['version']['field_voer_material_id'][LANGUAGE_NONE][0]['#disabled'] = TRUE;
  $form['version']['field_voer_material_version'] = $form['field_voer_material_version'];
  $form['version']['field_voer_material_version'][LANGUAGE_NONE][0]['#disabled'] = TRUE;


  // unset($form['title']);
  unset($form['field_voer_description']);
  unset($form['field_voer_authors']);
  unset($form['field_voer_categories']);
  unset($form['field_voer_language']);
  unset($form['field_voer_file']);
  unset($form['field_voer_material_type']);
  unset($form['field_voer_material_id']);
  unset($form['field_voer_material_version']);
  unset($form['field_voer_keywords']);
  unset($form['body']);

  if (sizeof($node->field_voer_material_version) == 0 || empty($node->field_voer_material_version[LANGUAGE_NONE][0]['value'])){
    $form['actions']['publish'] = array(
      '#type'=> 'submit',
      '#value'=> 'Publish',
      '#weight'=> 11,
      '#submit' => array('voer_content_form_push'),
    );
  }

}

/**
 * post data to server
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function voer_content_form_push($form, &$form_state)
{
  module_load_include('inc', 'voer_content');
  $node = $form_state['node'];
  if ($node->type == 'voer_module'){
    $node->title = $form_state['values']['title'];
    $node->body = $form_state['values']['body'];
    $node->field_voer_keywords = $form_state['values']['field_voer_keywords'];
    $node->field_voer_language = $form_state['values']['field_voer_language'];
    $node->field_voer_description = $form_state['values']['field_voer_description'];
    $node->field_voer_categories = $form_state['values']['field_voer_categories'];
    $node->field_voer_authors = $form_state['values']['field_voer_authors'];
    $result = publish_module($node);
    if ($result === FALSE){
      drupal_set_message(t("The module publish was not successful!"), 'error');
    }else{
      drupal_set_message(t("The module publish was successful!"));
      $node->field_voer_material_id[LANGUAGE_NONE][0]['value'] = $result->material_id;
      $node->field_voer_material_version[LANGUAGE_NONE][0]['value'] = $result->version;
      node_save($node);
      drupal_goto("node/" . $node->nid);
    }
  }else if ($node->type == 'voer_collection'){
    $node->title = $form_state['values']['title'];
    $node->field_voer_outline = $form_state['values']['field_voer_outline'];
    $node->field_voer_keywords = $form_state['values']['field_voer_keywords'];
    $node->field_voer_language = $form_state['values']['field_voer_language'];
    $node->field_voer_description = $form_state['values']['field_voer_description'];
    $node->field_voer_categories = $form_state['values']['field_voer_categories'];
    $node->field_voer_authors = $form_state['values']['field_voer_authors'];
    $result = publish_collection($node);
    if ($result === FALSE){
      drupal_set_message(t("The collection publish was not successful!"), 'error');
    }else{
      drupal_set_message(t("The collection publish was successful!"));
      $node->field_voer_material_id[LANGUAGE_NONE][0]['value'] = $result->material_id;
      $node->field_voer_material_version[LANGUAGE_NONE][0]['value'] = $result->version;
      node_save($node);
      drupal_goto("collection/" . $node->nid);
    }
  }
}

function voer_module_import_validate($form, &$form_state){
  $file = file_save_upload('import_file', array(
    // 'file_validate_is_image' => array(), // Validates file is really an image.
    'file_validate_extensions' => array('doc docx odt'), // Validate extensions.
  ));
  // If the file passed validation:
  if ($file) {
    // Move the file, into the Drupal file system
    if ($file = file_move($file, 'public://')) {

      // Gui noi dung file cho phan vp.transporter
      module_load_include('inc', 'voer_api');
      $realpath = drupal_realpath($file->uri);
      $zipContent = voer_api_import($realpath);
      // Luu ra thu muc import-result
      $uniqueFilename = md5($file->filename . microtime());
      $zipFile = file_unmanaged_save_data($zipContent, "public://import-result/" . $uniqueFilename . ".zip", FILE_EXISTS_RENAME);

      //Unzip it
      $realZipFile = drupal_realpath($zipFile);
      $parentDir = dirname($realZipFile);
      // drupal_set_message('Zip file: '. $realZipFile);
      // drupal_set_message('Dir path: '. $parentDir);
      $unzipDir = $parentDir . "/" . $uniqueFilename;
      // drupal_set_message('Dir path: '. $unzipDir);
      $zip = new ZipArchive;
      $res = $zip->open($realZipFile);
      if ($res === TRUE) {
          $zip->extractTo($unzipDir);
          $zip->close();
      }

      if (file_exists($unzipDir . '/index.html')){
          $importContent = file_get_contents($unzipDir . '/index.html');
          $importContent = preg_replace('/<img src="([^"]*)"/', '<img src="/sites/default/files/import-result/' . $uniqueFilename . '/$1"', $importContent);
          $form_state['input']['body'][LANGUAGE_NONE][0]['value'] = $importContent;
      }
    }
    else {
      form_set_error('file', t('Failed to write the uploaded file to the site\'s file folder.'));
    }
  }
}

function show_collection($node){
  module_load_include('inc', 'voer_content');
  $current_path = isset($_GET['q']) ? $_GET['q'] : "";
  $params = explode("/", $current_path);
  if (isset($params[2])){
    $n = voer_material_load($params[2]);
    return node_view($n);
  }else{
    $outline =$node->field_voer_outline['und'][0]['value'];
    $outline = json_decode($outline);
    if (isset($outline->content)){
      $result = find_first_module($outline);
      if ($result){
        $pies = explode("|", $result->id);
        $n = voer_material_load($pies[0]);
        return node_view($n);
      }else{
        return "";
      }
    }else{
      return "";
    }
  }
}

function find_first_module($item){
  if (isset($item->type) && $item->type == "module"){
    return $item;
  }else{
    $item = (array) $item;
    if (array_key_exists("content", $item)){
      foreach ($item['content'] as $it) {
        $result = find_first_module($it);
        if ($result != NULL){
          return $result;
        }
      }
    }
  }
}

function _get_collection_navigation($outline, &$navFlat)
{
  foreach ($outline as $item) {
    if ($item->type == 'module') {
      $navFlat[] = $item->id;
    } elseif ($item->type == 'subcollection') {
      _get_collection_navigation($item->content, $navFlat);
    }
  }
}

