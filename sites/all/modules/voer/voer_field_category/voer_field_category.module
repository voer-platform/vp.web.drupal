<?php
/**
 * @file
 * An example field using the Field Types API.
 */

/**
 * @defgroup field_example Example: Field Types API
 * @ingroup examples
 * @{
 * Examples using Field Types API.
 *
 * This is updated from Barry Jaspan's presentation at Drupalcon Paris,
 * @link http://acquia.com/community/resources/acquia-tv/intro-field-api-module-developers Video Presentation @endlink
 *
 * Providing a field requires:
 * - Defining a field:
 *   - hook_field_info()
 *   - hook_field_schema()
 *   - hook_field_validate()
 *   - hook_field_is_empty()
 *
 * - Defining a formatter for the field (the portion that outputs the field for
 *   display):
 *   - hook_field_formatter_info()
 *   - hook_field_formatter_view()
 *
 * - Defining a widget for the edit form:
 *   - hook_field_widget_info()
 *   - hook_field_widget_form()
 *
 * Our module defines the field in field_example_field_info(),
 * field_example_field_validate() and field_example_field_is_empty().
 * field_example_field_schema() is implemented in field_example.install.
 *
 * Our module sets up a formatter in field_example_field_formatter_info() and
 * field_example_field_formatter_view(). These are the API hooks that present
 * formatted and themed output to the user.
 * And finally, our module defines the widet in
 * field_example_field_widget_info() and field_example_field_widget_form().
 * The widget is the form element used to receive input from the user
 * when the field is being populated.
 *
 * @see field_types
 * @see field
 */

/***************************************************************
 * Field Type API hooks
 ***************************************************************/

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function voer_field_category_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'field_voer_categories' => array(
      'label' => t('VOER Categories'),
      'description' => t('VOER Categories.'),
      'allowed_values_function' => 'voer_field_category_allowed_values',
      // 'default_widget' => 'field_select_categories',
      // 'default_formatter' => 'field_display_names',
      'default_widget' => 'options_buttons',
      'default_formatter' => 'voer_field_category_list_view',
    ),
  );
}

/**
 * Implements hook_widget_info_alter().
 *
 */
function voer_field_category_field_widget_info_alter(&$info) {
  $widgets = array(
    'options_select' => array('field_voer_categories'),
  );
  foreach ($widgets as $widget => $field_types) {
    $info[$widget]['field types'] = array_merge($info[$widget]['field types'], $field_types);
  }
}

/**
 * Implements hook_options_list()
 *
 */
function voer_field_category_options_list($field, $instance, $entity_type, $entity) {
  module_load_include('inc', 'voer_api');
  $categories = voer_api_get_all_categories();
  $list = array();
  if (isset($categories)){
    foreach ($categories as $category) {
      $list[$category->id] = $category->name;
    }
  }
  return $list;
}

function voer_field_category_allowed_values($field, $instance, $entity_type, $entity, $cacheable = TRUE){
  module_load_include('inc', 'voer_api');
  $categories = voer_api_get_all_categories();
  $list = array();
  if (isset($categories)){
    foreach ($categories as $category) {
      $list[$category->id] = $category->name;
    }
  }
  return $list;
}

/**
 * Implements hook_field_validate().
 *
 * This hook gives us a chance to validate content that's in our
 * field. We're really only interested in the $items parameter, since
 * it holds arrays representing content in the field we've defined.
 * We want to verify that the items only contain RGB hex values like
 * this: #RRGGBB. If the item validates, we do nothing. If it doesn't
 * validate, we add our own error notification to the $errors parameter.
 *
 * @see field_example_field_widget_error()
 */
// function voer_field_category_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
//   foreach ($items as $delta => $item) {
//     if (!empty($item['value'])) {
//       if (! preg_match('@^#[0-9a-f]{6}$@', $item['value'])) {
//         $errors[$field['field_name']][$langcode][$delta][] = array(
//           'error' => 'field_example_invalid',
//           'message' => t('Color must be in the HTML format #abcdef.'),
//         );
//       }
//     }
//   }
// }


/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function voer_field_category_field_is_empty($item, $field) {
  return empty($item['value']);
}

/**
 * Implements hook_field_formatter_info().
 *
 * We need to tell Drupal that we have two different types of formatters
 * for this field. One will change the text color, and the other will
 * change the background color.
 *
 * @see field_example_field_formatter_view()
 */
function voer_field_category_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'voer_field_category_list_view' => array(
      'label' => t('Display categories name'),
      'field types' => array('field_voer_categories'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * Two formatters are implemented.
 * - field_example_simple_text just outputs markup indicating the color that
 *   was entered and uses an inline style to set the text color to that value.
 * - field_example_color_background does the same but also changes the
 *   background color of div.region-content.
 *
 * @see field_example_field_formatter_info()
 */
function voer_field_category_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    // This formatter simply outputs the field as text and with a color.
    case 'voer_field_category_list_view':
      module_load_include('inc', 'voer_api');
      foreach ($items as $delta => $item) {
        $cat_list = array();
        $cat_array = array();

        if ($item['value']) {
          $cat_list = explode(',', $item['value']);
        }

        foreach ($cat_list as $category_id) {
          $category = voer_api_get_category($category_id);

          if (!isset($category->detail)) {
            $cat_array[] = l($category->name, 'category/'.$category->id);
          }
        }

        $element[$delta] = array(
          '#type' => 'html_tag',
          '#tag' => 'span',
          '#attributes' => array(
            'class' => 'voer_field_author_content',
          ),
          '#value' => implode(', ', $cat_array),
        );
      }
      break;
  }

  return $element;
}


/**
 * @} End of "defgroup field_example".
 */
