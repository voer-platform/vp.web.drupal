<?php

/**
 * Implements hook_admin_paths
 * @return [type] [description]
 */
function voer_batch_import_admin_paths(){
  $paths = array(
    'import/batch' => TRUE,
    'import/batch/user' => TRUE,
  );
  return $paths;
}

function voer_batch_import_permission() {
  return array(
    'access batch import' => array(
      'title' => t('Access batch import'),
      'description' => t('Allow users to access batch import'),
    ),
  );
}

function voer_batch_import_menu(){
  $items['import/batch'] = array(
    'title' => t('Create modules'),
    'page callback' => 'voer_content_batch_import',
    'access arguments' => array('access batch import'),
  );

  $items['import/handler'] = array(
    'page callback' => 'voer_content_batch_import_handler',
    'access arguments' => array('access content'),
  );

  $items['import/batch/user'] = array(
    'title' => t('Create modules'),
    'page callback' => 'voer_content_batch_import_user',
    'access arguments' => array('access batch import'),
  );

  return $items;
}

function voer_content_batch_import_handler(){
  // Define a destination
  $targetFolder = 'public://import-result'; // Relative to the root

  // $verifyToken = md5('unique_salt' . $_POST['timestamp']);

  if (!empty($_FILES)) {
    $tempFile = $_FILES['Filedata']['tmp_name'];
    // $targetPath = $_SERVER['DOCUMENT_ROOT'] . $targetFolder;
    $targetPath = $targetFolder;
    $targetFile = rtrim($targetPath,'/') . '/' . $_FILES['Filedata']['name'];

    // Validate the file type
    $fileTypes = array('doc','docx'); // File extensions
    $fileParts = pathinfo($_FILES['Filedata']['name']);
    if (in_array($fileParts['extension'],$fileTypes)) {
      if (move_uploaded_file($tempFile,$targetFile)){
        module_load_include('inc', 'voer_api');
        $realpath = drupal_realpath($targetFile);
        $zipContent = voer_api_import($realpath);
        // Luu ra thu muc import-result
        $uniqueFilename = md5($fileParts['filename'] . microtime());
        $zipFile = file_unmanaged_save_data($zipContent, "public://import-result/" . $uniqueFilename . ".zip", FILE_EXISTS_RENAME);

        //Unzip it
        $realZipFile = drupal_realpath($zipFile);
        $parentDir = dirname($realZipFile);
        // drupal_set_message('Zip file: '. $realZipFile);
        // drupal_set_message('Dir path: '. $parentDir);
        $unzipDir = $parentDir . "/" . $uniqueFilename;
        // drupal_set_message('Dir path: '. $unzipDir);
        $zip = new ZipArchive;
        $res = $zip->open($realZipFile);
        if ($res === TRUE) {
            $zip->extractTo($unzipDir);
            $zip->close();
        }

        if (file_exists($unzipDir . '/index.html')){
            $importContent = file_get_contents($unzipDir . '/index.html');
            $importContent = preg_replace('/<img src="([^"]*)"/', '<img src="/sites/default/files/import-result/' . $uniqueFilename . '/$1"', $importContent);
        }

        voer_content_batch_create(array(
          'title' => $fileParts['filename'],
          'content' => $importContent
        ));

      }
      echo '1';
    } else {
      echo 'Invalid file type.';
    }
  }
  //drupal_exit();
}

function voer_content_batch_create($n){
  global $user;
  $user_data = user_load($_POST['uid']);

  $person_id = '';
  if (isset($user_data->field_person_id[LANGUAGE_NONE][0]['value'])) {
    $person_id = $user_data->field_person_id[LANGUAGE_NONE][0]['value'];
  } elseif (isset($user_data->field_person_id[0]['value'])) {
    $person_id = $user_data->field_person_id[0]['value'];
  }

  module_load_include('inc', 'voer_content');
  $node = new stdClass();
  $node->type = 'voer_module';
  node_object_prepare($node);
  $node->uid = $_POST['uid'];;
  $node->created = strtotime("now");
  $node->changed = strtotime("now");
  $node->promote = 0;
  $node->comment = 0;
  $node->language = LANGUAGE_NONE;
  $node->status = FALSE;
  $node->field_voer_material_type[$node->language][0]['value'] = "1";
  $node->title = $n['title'];
  $node->body[$node->language][0]['value'] = $n['content'];
  $node->body[$node->language][0]['format'] = 'full_html';
  // $node->field_voer_keywords[$node->language][0]['value'] = "";
  $node->field_voer_language[$node->language][0]['value'] = "vn";
  // $node->field_voer_description[$node->language][0]['value'] = "";
  // $node->field_voer_categories[$node->language][0]['value'] = "";

  if ($person_id) {
    $node->field_voer_authors[$node->language][0]['author'] = $person_id;
    $node->field_voer_authors[$node->language][0]['editor'] = $person_id;
    $node->field_voer_authors[$node->language][0]['licensor'] = $person_id;
    $node->field_voer_authors[$node->language][0]['maintainer'] = $person_id;
  }

  // $result = publish_module($node);
  node_save($node);
}

function voer_content_batch_import(){
  // Build Breadcrumbs
  $breadcrumb = array();
  $breadcrumb[] = l('Dashboard', 'admin/dashboard');
  $breadcrumb[] = l('Create modules', 'import/batch');

  // Set Breadcrumbs
  drupal_set_breadcrumb($breadcrumb);

  return drupal_get_form('voer_content_batch_import_form');
}

function voer_content_batch_import_form($form, &$form_state){
  global $user;

  $form = array();

  drupal_add_js(array('voer_import' => array('uid' => $user->uid)), 'setting');

  $form += array(
    '#type' => 'container',
    '#attributes' => array("id" => "voer-batch-import"),
    '#attached' => array(
      'css' => array(drupal_get_path('module', 'voer_batch_import') . '/uploadify/uploadify.css'),
      'js' => array(
                drupal_get_path('module', 'voer_batch_import') . '/uploadify/jquery.uploadify.js',
                drupal_get_path('module', 'voer_batch_import') . '/js/main.js',
              ),
    ),
  );

  $form['upload'] = array(
    '#name' => '',
    '#type' => 'file',
    '#title' => t('Choose file(s)'),
    '#title_display' => 'invisible',
    '#size' => 22,
    '#theme_wrappers' => array(),
    '#weight' => -10,
    '#attributes' => array('id' => 'file_upload'),
  );

  $form['finish'] = array(
    '#type' => 'button',
    '#value' => t('Import'),
    '#weight' => 1001,
    '#attributes' => array(
      'onclick' => "javascript:jQuery('#file_upload').uploadify('upload','*');return false;",
    ),
  );

  $form['result'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="batch-import-result"></div>',
    '#weight' => 100,
  );

  return $form;
}

function voer_content_batch_import_user()
{
  // Build Breadcrumbs
  $breadcrumb = array();
  $breadcrumb[] = l('Dashboard', 'admin/dashboard');
  $breadcrumb[] = l('Create modules', 'import/batch');
  $breadcrumb[] = l('Import user', 'import/batch/user');

  // Set Breadcrumbs
  drupal_set_breadcrumb($breadcrumb);

  return drupal_get_form('voer_content_batch_import_user_form');
}

function voer_content_batch_import_user_form($form, &$form_state)
{
  $form = array();

  $form['default_password'] = array(
    '#title' => t('Set default password for users'),
    '#type' => 'textfield',
    '#value' => 'vnfvoer123*',
    '#weight' => 1000,
    '#attributes' => array(
    ),
  );

  $form['finish'] = array(
    '#type' => 'submit',
    '#value' => t('Import user'),
    '#weight' => 1001,
    '#submit' => array('voer_content_batch_import_user_submit'),
    '#attributes' => array(
    ),
  );

  return $form;
}

// function voer_content_batch_import_user_submit($form, &$form_state)
// {
//   //get data all user
//   module_load_include('inc', 'voer_api');

//   $page = 1;
//   $user_list = array();

//   $continue_flag = TRUE;

//   while ($continue_flag) {
//     $authors = voer_api_get_all_authors($page);

//     $user_list[] = str_replace(array('[', ']'), '', json_encode($authors->results));

//     if ($authors->next == NULL) {  //will remove '$page > 400' when VPR fixbug
//       $continue_flag = FALSE;
//     }

//     $page++;
//   }
//   echo $user_list_1 = '[' . implode(',', $user_list) . ']';
//   die;
// }

function voer_content_batch_import_user_submit($form, &$form_state)
{
  module_load_include('inc', 'voer_api');
  ini_set('memory_limit', '1024M');

  $user_name_list = array();
  $user_mail_list = array();
  $person_id_list = array();

  $default_password = $form_state['input']['default_password'];

  $users = entity_load('user');
  foreach ($users as $user_id => $user) {
    $user_name_list[] = $user->name;
    $user_mail_list[] = $user->mail;

    if (isset($user->field_person_id[LANGUAGE_NONE][0]['value'])) {
      $person_id_list[] = $user->field_person_id[LANGUAGE_NONE][0]['value'];
    } elseif (isset($user->field_person_id[0]['value'])) {
      $person_id_list[] = $user->field_person_id[0]['value'];
    }

  }

  $backup_data = array();
  $user_created_count = 0;

  $author_list_file = drupal_realpath('public://backup').'/list_person.json';

  if (!file_exists($author_list_file)) {
    drupal_set_message('Oops, file <i>list_person.json</i> not found in folder sites/default/files/backup/', 'error');
    return;
  }

  $authors = file_get_contents($author_list_file);
  $authors = json_decode($authors);

  foreach ($authors as $key => $author) {
    $csv_data = array();
    $insert_into_csv = FALSE;
    $username = $author->user_id ? strtolower($author->user_id) : 'unknown';
    $email = $author->email ? strtolower($author->email) : 'user.voer@voer.edu.vn';
    $person_id = $author->id;

    //cancel with user has field_person_id
    if (in_array($person_id, $person_id_list)) {
      continue;
    } else {
      $person_id_list[] = $person_id;
    }

    if (in_array($username, $user_name_list) || in_array($email, $user_mail_list)) {
      $insert_into_csv = TRUE;
      $csv_data['old'] = (array) $author;
    }

    for ($i = 0; $i <= 200; $i++) {
      if ($i == 0) {
        $tmp_username = $username;
      } else {
        $tmp_username = $username . $i;
      }

      if (!in_array($tmp_username, $user_name_list)) {
        $username = $tmp_username;
        break;
      }
    }
    $user_name_list[] = $username;

    for ($i = 0; $i <= 200; $i++) {
      if ($i == 0) {
        $tmp_email = $email;
      } else {
        $tmp_email = str_replace('@', $i . '@', $email);
      }

      if (!in_array($tmp_email, $user_mail_list)) {
        $email = $tmp_email;
        break;
      }
    }
    $user_mail_list[] = $email;

    $fields = array(
      'name' => $username,
      'mail' => $email,
      'pass' => $default_password,
      'status' => 1,
      'init' => $email,
      'roles' => array(
        DRUPAL_AUTHENTICATED_RID => TRUE,
      ),
      'field_person_id' => array(LANGUAGE_NONE => array(0 => array('value' => $author->id))),
    );
    if (isset($author->fullname)) {
      $fields['field_person_fullname'] = array(LANGUAGE_NONE => array(0 => array('value' => $author->fullname)));
    }
    if (isset($author->first_name)) {
      $fields['field_person_first_name'] = array(LANGUAGE_NONE => array(0 => array('value' => $author->first_name)));
    }
    if (isset($author->last_name)) {
      $fields['field_person_last_name'] = array(LANGUAGE_NONE => array(0 => array('value' => $author->last_name)));
    }
    if (isset($author->title)) {
      $fields['field_person_title'] = array(LANGUAGE_NONE => array(0 => array('value' => $author->title)));
    }
    if (isset($author->homepage)) {
      $fields['field_person_homepage'] = array(LANGUAGE_NONE => array(0 => array('value' => $author->homepage)));
    }
    if (isset($author->affiliation)) {
      $fields['field_person_affiliation'] = array(LANGUAGE_NONE => array(0 => array('value' => $author->affiliation)));
    }
    if (isset($author->affiliation_url)) {
      $fields['field_person_affiliation_url'] = array(LANGUAGE_NONE => array(0 => array('value' => $author->affiliation_url)));
    }
    if (isset($author->national)) {
      $fields['field_person_national'] = array(LANGUAGE_NONE => array(0 => array('value' => $author->national)));
    }
    if (isset($author->biography)) {
      $fields['field_person_biography'] = array(LANGUAGE_NONE => array(0 => array('value' => $author->biography)));
    }
    if (isset($author->client_id)) {
      $fields['field_person_client_id'] = array(LANGUAGE_NONE => array(0 => array('value' => $author->client_id)));
    }

    $query = "SELECT max(uid) FROM {users} ";
    $max_uid = db_query($query)->fetchField();

    $current_user_id = $max_uid + 1;
    $fields['uid'] = $current_user_id;
    $fields['update_to_vpr'] = FALSE;

    $avatar_link = sprintf('http://%s:%s/%s%s/avatar/', VOER_API_URL, VOER_API_PORT, VOER_API_COMMAND_AUTHOR, $author->id);
    $file_headers = @get_headers($avatar_link);

    if ($file_headers[0] == 'HTTP/1.1 200 OK') {
      drupal_set_message($author->id);
      $file_name = 'picture-'.$current_user_id.'-'.time().'.jpg';
      $tmp_avatar_path = drupal_realpath('public://pictures').'/' . $file_name;
      $ch = curl_init($avatar_link);
      $fp = fopen($tmp_avatar_path, 'wb');
      curl_setopt($ch, CURLOPT_FILE, $fp);
      curl_setopt($ch, CURLOPT_HEADER, 0);
      curl_exec($ch);
      curl_close($ch);
      fclose($fp);

      $image_info = image_get_info($tmp_avatar_path);

      // create file object
      $file = new stdClass();
      $file->uid = $current_user_id;
      $file->uri = 'public://pictures/' . $file_name;
      $file->filemime = $image_info['mime_type'];
      $file->status = FILE_STATUS_PERMANENT; // Yes! Set status to 0 in order to save temporary file.
      $file->filesize = $image_info['file_size'];
      $file->filename = $file_name;

      $errors = file_validate($file);
      if (empty($errors)) {
          file_save($file);
          $fields['picture'] = $file->fid;
      }
    }

    user_save('', $fields);
    $user_created_count++;

    if ($insert_into_csv == TRUE) {
      $tmp_author = (array) $author;
      $tmp_author['user_id'] = $fields['name'];
      $tmp_author['email'] = $fields['mail'];

      $csv_data['new'] = $tmp_author;
    }

    if ($csv_data) {
      $backup_data[] = $csv_data;
    }
  }

  $default_message = t('Import user successfull');

  if ($user_created_count > 0) {
    drupal_set_message(t('!user_created_count user(s) was created.', array('!user_created_count' => $user_created_count)));
  }

  if ($backup_data) {
    // Add the headers needed to let the browser know this is a csv file download.
    drupal_add_http_header('Content-Type', 'text/csv; utf-8');
    drupal_add_http_header('Content-Disposition', 'attachment; filename = backup_data.csv');

    $backup_folder = drupal_realpath('public://backup');
    if (!file_exists($backup_folder)) {
      mkdir($backup_folder, 0777);
    }

    $backup_filename = 'backup-'.date('YmdHis').'.csv';
    // Instead of writing to a file, we write to the output stream.
    $fh = fopen($backup_folder.'/'.$backup_filename, 'w');

    fputcsv($fh, array(t('No.'), t('Person ID'), t('Old data'), t('New data'))); // Add a header row

    foreach($backup_data as $index => $data) {
      fputcsv($fh, array($index + 1, $data['old']['id'], json_encode($data['old']), json_encode($data['new'])));
    }

    //add a empty row
    fputcsv($fh, array(' ', ' ', ' ', ' '));

    fputcsv($fh, array(t('Default password:'), $default_password, ' ', ' '));

    fclose($fh); // Close the output stream.

    drupal_set_message(t('!user_exists_count user(s) are exist. (!url)', array('!user_exists_count' => count($backup_data), '!url' => l($backup_filename, 'sites/default/files/backup/'.$backup_filename))));
  }

  drupal_set_message($default_message);
}