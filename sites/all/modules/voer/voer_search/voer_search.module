<?php
define('VOER_SEARCH_TYPE_CONTENT', 1);
define('VOER_SEARCH_TYPE_AUTHOR', 2);

function voer_search_menu(){
  $items = array();
  $items['s/%menu_tail'] = array(
    'title' => t('Search results:'),
    'load arguments' => array('%map', '%index'),
    'page callback' => 'search_voer_page',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );
  $items['s/%menu_tail/%type'] = array(
    'title' => t('Search results:'),
    'load arguments' => array('%map', '%index'),
    'page callback' => 'search_voer_page',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
  );
  $items['ajax/s/m'] = array(
    'page callback' => 'ajax_search_module_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function voer_search_block_info(){
  $blocks['voer_search_block'] = array(
    'info' => t('VOER - Search'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function voer_search_block_view($delta='') {
  $block = array();

  switch($delta) {
    case 'voer_search_block' :
      $block['content'] = drupal_get_form("voer_search_form");
      break;
  }

  return $block;
}

function voer_search_form(){
  $form = array();
  $form['keyword'] = array(
    '#type' => 'textfield',
    '#weight' => 0,
    '#prefix' => '<div class="input-append">',
    '#suffix' => '<button class="btn btn-primary" type="submit" name="op">'.t('Search').'</button></div>',
    '#attributes' => array(
      'class' => array('input-xxlarge'),
      'placeholder' => t('Please enter something'),
    ),
  );

  $form['search_on'] = array(
    '#type' => 'select',
    '#options' => array(VOER_SEARCH_TYPE_CONTENT => 'Content', VOER_SEARCH_TYPE_AUTHOR => 'Author'),
    '#default_value' => VOER_SEARCH_TYPE_CONTENT,
    '#required' => TRUE,
    '#attributes' => array(
      'class' => array('search-on-select'),
    ),
  );

  $form['search'] = array(
    '#type' => 'submit',
    '#weight' => 10,
    '#value' => t('Search'),
    '#attributes' => array(
      'style' => 'display: none;',
    ),
  );

  return $form;
}

function voer_search_form_validate($form, &$form_state){
  if (!$form_state['values']['keyword']){
    form_set_error('keyword', t('You must enter a keyword for go ahead!'));
  }
}

function voer_search_form_submit($form, &$form_state){
  $keyword = trim($form_state['values']['keyword']);

  $type = $form_state['values']['search_on'];

  drupal_goto("s/" . $keyword . '/'. $type);
}

function ajax_search_module_page(){
  $keyword = $_POST['keyword'];
  $page = isset($_POST['page']) ? $_POST['page'] : 1;

  module_load_include('inc', 'voer_api');
  $materials = voer_api_search_all_module($keyword, $page);

  $result = array();
  $material_list = array();

  if ($materials->count > 0) {
    foreach ($materials->results as $material) {
      $material_list[$material->material_id . "|" . $material->version] = $material->title;
    }

    $result = array(
      '#type' => 'checkboxes',
      '#options' => $material_list,
      // '#attributes' => array(
      //   'class' => array('input-checkbox-item'),
      // ),
    );

    $next_button = array();
    $prev_button = array();

    if ($materials->next) {
      $next_button = array(
        '#type' => 'button',
        '#value' => 'Next',
        '#attributes' => array(
          'class' => array('author_next_btn'),
          'page' => $page + 1,
          'keyword' => check_plain($keyword),
          'onclick' => 'loadModuleSearchPage(this)',
        ),
      );
    }

    if ($materials->previous) {
      $prev_button = array(
        '#type' => 'button',
        '#value' => 'Prev',
        '#attributes' => array(
          'class' => array('author_prev_btn'),
          'page' => $page - 1,
          'keyword' => check_plain($keyword),
          'onclick' => 'loadModuleSearchPage(this)',
        ),
      );
    }

    echo drupal_render(form_process_checkboxes($result)) . drupal_render($prev_button) . drupal_render($next_button);

  } else {
    $result = t('No result');
  }
}

function search_voer_page($keyword){
  $keyword = trim($keyword);
  $type = arg(2);

  if (!$type) {
    $type == VOER_SEARCH_TYPE_CONTENT;
  }

  if ($type == VOER_SEARCH_TYPE_CONTENT) {
    return show_materials_result($keyword);
  } elseif ($type == VOER_SEARCH_TYPE_AUTHOR) {
    return search_by_author($keyword);
  }
}

function show_materials_result($keyword){
  module_load_include('inc', 'voer_api');
  try {
    $page = isset($_GET['page']) ? $_GET['page'] : 0;
    $materials = voer_api_search_on_material($keyword, $page + 1);
    if ($materials == null || $materials->count == 0){
      return t("Materials not found!");
    }else{
      $nodes = array();
      pager_default_initialize($materials->count, 10);
      foreach ($materials->results as $key => $material) {
        $node = new stdClass();
        $node->type = voer_material_type($material->material_type);
        node_object_prepare($node);
        $node->title = $material->title;
        $node->material_id = $material->material_id;
        $node->nid = $key;
        $node->comment = 0;
        $node->field_voer_description[LANGUAGE_NONE][0]['value'] = isset($material->description) ? $material->description : "";
        $node->field_voer_categories[LANGUAGE_NONE][0]['value'] = $material->categories;
        $node->field_voer_authors[LANGUAGE_NONE][0]['value'] = $material->author;
        $nodes[] = $node;
      }
      $output = node_view_multiple($nodes);
      $output['pager'] = array('#markup' => theme('pager'));
      return $output;
    }
  } catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
    return "";
  }
}

function search_by_author($keyword) {
  module_load_include('inc', 'voer_api');
  try {
    $page = isset($_GET['page']) ? $_GET['page'] : 0;
    $authors = voer_api_search_on_person($keyword, $page + 1);
    if ($authors->count == 0){
      return t("Author not found!");
    } else {
      $nodes = array();
      pager_default_initialize($authors->count, 10);
      foreach ($authors->results as $key => $author) {
        $node = new stdClass();
        $node->type = 'person';
        node_object_prepare($node);

        if (isset($author->fullname)) {
          $node->title = $author->fullname;
        } else {
          $node->title = $author->user_id;
        }

        $node->person_id = $author->id;
        $node->nid = $key;
        $node->comment = 0;
        if (isset($author->biography)) {
          $node->body[LANGUAGE_NONE][0]['value'] = $author->biography;
        }
        $nodes[] = $node;
      }
      $output = node_view_multiple($nodes);
      $output['pager'] = array('#markup' => theme('pager'));
      return $output;
    }
  } catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
    return "";
  }
}
