<?php
/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function voer_field_author_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'field_voer_authors' => array(
      'label' => t('VOER roles'),
      'description' => t('This field stores VOER author in the database.'),
      'settings' => array('max_length' => 255),
      'default_widget' => 'voer_field_author_text',
      'default_formatter' => 'voer_field_author_simple_text',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function voer_field_author_field_widget_info() {
  return array(
    'voer_field_author_text' => array(
      'label' => t('VOER author text field'),
      'field types' => array('field_voer_authors'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function voer_field_author_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'voer_field_author_simple_text' => array(
      'label' => t('VOER author simple formatter'),
      'field types' => array('field_voer_authors'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function voer_field_author_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  module_load_include('inc', 'voer_api');

  $element = array();
  $voer_field_author_roles = _voer_field_author_roles();

  switch ($display['type']) {
    // This formatter simply outputs the field as text and with a color.
    case 'voer_field_author_simple_text':
      foreach ($items as $delta => $item) {
        $author_list = array();
        $author_array = array();

        $author = isset($item['author']) ? $item['author'] : '';
        $editor = isset($item['editor']) ? $item['editor'] : '';
        $licensor = isset($item['licensor']) ? $item['licensor'] : '';
        $maintainer = isset($item['maintainer']) ? $item['maintainer'] : '';
        $translator = isset($item['translator']) ? $item['translator'] : '';
        $contributor = isset($item['contributor']) ? $item['contributor'] : '';

        foreach ($voer_field_author_roles as $role_name) {
          if ($$role_name) {
            $author_list = explode(',', $$role_name);

            foreach ($author_list as $author_id) {
              $author = voer_api_get_author($author_id);

              if (!isset($author->detail)) {
                $author_array[$role_name][] = l($author->fullname, 'person/'.$author->id);
              }
            }

            $element[$delta][$role_name] = array(
              '#type' => 'html_tag',
              '#tag' => 'span',
              '#attributes' => array(
                'class' => 'voer_field_author_content',
              ),
              '#value' => implode(', ', $author_array[$role_name]),
            );
          }
        }

//        $element[$delta] = array(
//          '#type' => 'html_tag',
//          '#tag' => 'div',
//          '#attributes' => array(
//            'class' => 'voer_field_author_content',
//          ),
//          '#value' => implode(', ', $author_array),
//        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_form().
 */
function voer_field_author_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  module_load_include('inc', 'voer_api');

  global $user;
  $user_data = user_load($user->uid);

  if (isset($user_data->field_person_id[LANGUAGE_NONE][0]['value'])) {
    $person_id = $user_data->field_person_id[LANGUAGE_NONE][0]['value'];
  } elseif (isset($user_data->field_person_id[0]['value'])) {
    $person_id = $user_data->field_person_id[0]['value'];
  }else{
    $person_id = "";
  }

  if ($person_id != ""){
    $current_author = (array)voer_api_get_author($person_id);
  }else{
    $current_author = null;
  }

  $field_name = $field['field_name'];

  $author = isset($items[$delta]['author']) ? $items[$delta]['author'] : '';
  $editor = isset($items[$delta]['editor']) ? $items[$delta]['editor'] : '';
  $licensor = isset($items[$delta]['licensor']) ? $items[$delta]['licensor'] : '';
  $maintainer = isset($items[$delta]['maintainer']) ? $items[$delta]['maintainer'] : '';
  $translator = isset($items[$delta]['translator']) ? $items[$delta]['translator'] : '';
  $contributor = isset($items[$delta]['contributor']) ? $items[$delta]['contributor'] : '';

  $voer_field_author_roles = _voer_field_author_roles();

  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {
    case 'voer_field_author_text':
      $widget += array(
        '#type' => 'fieldset',
        '#element_validate' => array('voer_field_author_text_validate'),
        '#attributes' => array('class' => array('edit-voer-field-author')),
        '#attached' => array(
          'js' => array(drupal_get_path('module', 'voer_field_author') . '/js/voer_field_author.js'),
          'css' => array(drupal_get_path('module', 'voer_field_author') . '/css/voer_field_author.css'),
        ),
      );

      $header = array(
        array('data' => t('Name')),
        array('data' => t('User id')),
        array(
          'data' => t('Author'),
        ),
        array(
          'data' => t('Editor'),
        ),
        array(
          'data' => t('Licensor'),
        ),
        array(
          'data' => t('Maintainer'),
        ),
        array(
          'data' => t('Translator'),
        ),
        array(
          'data' => t('Contributor'),
        ),
        array('data' => t('Remove User'))
      );
      $table_attributes = array('id' => 'voer-node-table', 'align' => 'center');

      $row_data = array();
      $author_roles = array();

      if ((!isset($form['#node_edit_form']) || $form['#node_edit_form'] == FALSE) && $current_author) {
        $row_data_tmp = array(
          l($current_author['fullname'], 'person/'.$current_author['id'], array('attributes' => array('target' => '_blank'))),
          l($current_author['user_id'], 'person/'.$current_author['id'], array('attributes' => array('target' => '_blank'))),
        );

        foreach ($voer_field_author_roles as $index => $role_name) {
          if ($index < 4) {
            $checked = TRUE;
          } else {
            $checked = FALSE;
          }

          $row_data_tmp[] = array(
            'data' => theme('checkbox', array('element' => array(
              '#checked' => $checked,
              '#attributes' => array(
                'class' => array('member-roles', 'roles-'.$role_name.'-1'),
                'value' => $current_author['id'],
                'role' => $role_name,
                )
              )
            )),
            'class' => 'member-role-'.$role_name,
          );
        }

        $row_data_tmp[] = sprintf('<span class="voer-author-delete" title="Delete author" rel="%s"></span>', 1);
        $row_data[] = $row_data_tmp;
      }

      foreach ($voer_field_author_roles as $role_name) {
        if ($$role_name) {
          $author_list = explode(',', $$role_name);

          foreach ($author_list as $author_id) {
            $person = voer_api_get_author(trim($author_id));

            if (!isset($person->detail)) {
              $author_roles[$person->id]['fullname'] = $person->fullname;
              $author_roles[$person->id]['user_id'] = $person->user_id;
              $author_roles[$person->id][$role_name] = TRUE;
            }
          }
        }
      }

      foreach ($author_roles as $author_id => $author_role) {
        $row_data_tmp = array(
          l($author_role['fullname'], 'person/'.$author_id, array('attributes' => array('target' => '_blank'))),
          l($author_role['user_id'], 'person/'.$author_id, array('attributes' => array('target' => '_blank'))),
        );

        foreach ($voer_field_author_roles as $role_name) {
          $row_data_tmp[] = array(
            'data' => theme('checkbox', array('element' => array(
              '#checked' => isset($author_role[$role_name]) ? $author_role[$role_name] : FALSE,
              '#attributes' => array(
                'class' => array('member-roles', 'roles-'.$role_name.'-'.$author_id),
                'value' => $author_id,
                'role' => $role_name,
                )
              )
            )),
            'class' => 'member-role-'.$role_name,
          );
        }

        $row_data_tmp[] = sprintf('<span class="voer-author-delete" title="Delete author" rel="%s"></span>', $author_id);
        $row_data[] = $row_data_tmp;
      }

      $author_picker = theme('table', array('header' => $header, 'rows' => $row_data, 'attributes' => $table_attributes, 'sticky' => FALSE, 'empty' => t('No data.')));

      if ($row_data) {
        $widget['voer_field_author_picker'] = array(
          '#type' => 'html_tag',
          '#tag' => 'div',
          '#attributes' => array(
            'class' => array('voer-field-author-picker-list'),
          ),
          '#value' => $author_picker,
        );

      } else {
        $widget['voer_field_author_picker'] = array(
          '#type' => 'html_tag',
          '#tag' => 'div',
          '#attributes' => array(
            'class' => array('voer-field-author-picker-list', 'display_none'),
          ),
          '#value' => $author_picker,
        );
      }

      $widget['voer_field_author_add_more'] = array(
        '#type' => 'fieldset',
        '#title' => t('Add more authors'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );

      $widget['voer_field_author_add_more']['voer_field_author_search_text'] = array(
        '#type' => 'textfield',
        '#description' => t('Select people to serve as authors.'),
        '#attributes' => array(
          'placeholder' => t('Please enter keyword'),
          'class' => array('voer-field-author-search-text'),
        ),
      );

      $widget['voer_field_author_add_more']['voer_field_author_search_btn'] = array(
        '#type' => 'button',
        '#value' => t('Search'),
        '#attributes' => array(
          'class' => array('voer-field-author-search-btn'),
        ),
      );

      break;
  }

  $element['author_extra'] = $widget;
  foreach ($voer_field_author_roles as $index => $role_name) {
    if ((!isset($form['#node_edit_form']) || $form['#node_edit_form'] == FALSE) && $index < 4) {
      $widget = array(
        '#type' => 'hidden',
        '#value' => $current_author['id'],
        '#default_value' => isset($$role_name) ? $$role_name : '',
        '#attributes' => array(
          'class' => array('voer-field-author-selected-'.$role_name),
        ),
      );
    } else {
      $widget = array(
        '#type' => 'hidden',
        '#default_value' => isset($$role_name) ? $$role_name : '',
        '#attributes' => array(
          'class' => array('voer-field-author-selected-'.$role_name),
        ),
      );
    }

    $element[$role_name] = $widget;
  }

  $element['voer_add_author_form'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add new author'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#attributes' => array('class' => array('voer-add-author-form'), 'style' => 'display: none;'),
  );

  $element['voer_add_author_form']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#description' => t('Spaces are allowed; punctuation is not allowed except for periods, hyphens, apostrophes, and underscores.'),
    '#size' => 60,
    '#attributes' => array(
      'class' => array('edit-voer-add-new-author-name'),
    )
  );

  $element['voer_add_author_form']['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail address'),
    '#description' => t('A valid e-mail address. All e-mails from the system will be sent to this address. The e-mail address is not made public and will only be used if you wish to receive a new password or wish to receive certain news or notifications by e-mail.'),
    '#size' => 60,
    '#attributes' => array(
      'class' => array('edit-voer-add-new-author-mail'),
    )
  );

  $element['voer_add_author_form']['fullname'] = array(
    '#type' => 'textfield',
    '#title' => t('Fullname'),
    '#size' => 60,
    '#attributes' => array(
      'class' => array('edit-voer-add-new-author-fullname'),
    )
  );

  $element['voer_add_author_form']['input'] = array(
    '#type' => 'button',
    '#value' => t('Add new author'),
    '#attributes' => array(
      'class' => array('voer-add-new-author-btn'),
    ),
  );

  return $element;
}

function voer_field_author_text_validate($element, &$form_state) {
  global $user;
  $user_data = user_load($user->uid);

  if (isset($user_data->field_person_id[LANGUAGE_NONE][0]['value'])) {
    $person_id = $user_data->field_person_id[LANGUAGE_NONE][0]['value'];
  } elseif (isset($user_data->field_person_id[0]['value'])) {
    $person_id = $user_data->field_person_id[0]['value'];
  }

  $delta = $element['#delta'];
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $field_name = $field['field_name'];
  $voer_field_author_roles = _voer_field_author_roles();

  foreach ($voer_field_author_roles as $index => $role_name) {
    if (isset($form_state['values'][$field_name][$element['#language']][$delta][$role_name]) && $form_state['values'][$field_name][$element['#language']][$delta][$role_name]) {
      $value = $form_state['values'][$field_name][$element['#language']][$delta][$role_name];
      form_set_value($element, $value, $form_state);
    } elseif ($index < 4) {
      $form_state['values'][$field_name][$element['#language']][$delta][$role_name] = $person_id;
      form_set_value($element, $person_id, $form_state);
    }
  }
}

/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function voer_field_author_field_is_empty($item, $field) {
  return empty($item['author']);
}

function _voer_field_author_roles()
{
  return array('author', 'editor', 'licensor', 'maintainer', 'translator', 'contributor');
}
