<?php
/**
 * @file
 * An example field using the Field Types API.
 */

/**
 * @defgroup field_example Example: Field Types API
 * @ingroup examples
 * @{
 * Examples using Field Types API.
 *
 * This is updated from Barry Jaspan's presentation at Drupalcon Paris,
 * @link http://acquia.com/community/resources/acquia-tv/intro-field-api-module-developers Video Presentation @endlink
 *
 * Providing a field requires:
 * - Defining a field:
 *   - hook_field_info()
 *   - hook_field_schema()
 *   - hook_field_validate()
 *   - hook_field_is_empty()
 *
 * - Defining a formatter for the field (the portion that outputs the field for
 *   display):
 *   - hook_field_formatter_info()
 *   - hook_field_formatter_view()
 *
 * - Defining a widget for the edit form:
 *   - hook_field_widget_info()
 *   - hook_field_widget_form()
 *
 * Our module defines the field in field_example_field_info(),
 * field_example_field_validate() and field_example_field_is_empty().
 * field_example_field_schema() is implemented in field_example.install.
 *
 * Our module sets up a formatter in field_example_field_formatter_info() and
 * field_example_field_formatter_view(). These are the API hooks that present
 * formatted and themed output to the user.
 * And finally, our module defines the widet in
 * field_example_field_widget_info() and field_example_field_widget_form().
 * The widget is the form element used to receive input from the user
 * when the field is being populated.
 *
 * @see field_types
 * @see field
 */

/***************************************************************
 * Field Type API hooks
 ***************************************************************/

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function voer_field_category_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'field_voer_categories' => array(
      'label' => t('VOER Categories'),
      'description' => t('VOER Categories.'),
      // 'default_widget' => 'field_select_categories',
      // 'default_formatter' => 'field_display_names',
      'default_widget' => 'options_buttons',
      'default_formatter' => 'list_default',
    ),
  );
}

/**
 * Implements hook_widget_info_alter().
 *
 */
function voer_field_category_field_widget_info_alter(&$info) {
  $widgets = array(
    'options_select' => array('field_voer_categories'),
  );
  foreach ($widgets as $widget => $field_types) {
    $info[$widget]['field types'] = array_merge($info[$widget]['field types'], $field_types);
  }
}

/**
 * Implements hook_options_list()
 *
 */
function voer_field_category_options_list($field, $instance, $entity_type, $entity) {
  module_load_include('inc', 'voer_api');
  $categories = voer_api_get_all_categories();
  $list = array();
  if (isset($categories) && isset($categories->results)){
    foreach ($categories->results as $category) {
      $list[$category->id] = $category->name;
    }
  }
  return $list;
}

/**
 * Implements hook_field_validate().
 *
 * This hook gives us a chance to validate content that's in our
 * field. We're really only interested in the $items parameter, since
 * it holds arrays representing content in the field we've defined.
 * We want to verify that the items only contain RGB hex values like
 * this: #RRGGBB. If the item validates, we do nothing. If it doesn't
 * validate, we add our own error notification to the $errors parameter.
 *
 * @see field_example_field_widget_error()
 */
// function voer_field_category_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
//   foreach ($items as $delta => $item) {
//     if (!empty($item['value'])) {
//       if (! preg_match('@^#[0-9a-f]{6}$@', $item['value'])) {
//         $errors[$field['field_name']][$langcode][$delta][] = array(
//           'error' => 'field_example_invalid',
//           'message' => t('Color must be in the HTML format #abcdef.'),
//         );
//       }
//     }
//   }
// }


/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function voer_field_category_field_is_empty($item, $field) {
  return empty($item['value']);
}

/**
 * Implements hook_field_formatter_info().
 *
 * We need to tell Drupal that we have two different types of formatters
 * for this field. One will change the text color, and the other will
 * change the background color.
 *
 * @see field_example_field_formatter_view()
 */
// function voer_field_category_field_formatter_info() {
//   return array(
//     // This formatter just displays the hex value in the color indicated.
//     'field_display_names' => array(
//       'label' => t('Display categories name'),
//       'field types' => array('field_voer_categories'),
//     ),
//   );
// }

/**
 * Implements hook_field_formatter_view().
 *
 * Two formatters are implemented.
 * - field_example_simple_text just outputs markup indicating the color that
 *   was entered and uses an inline style to set the text color to that value.
 * - field_example_color_background does the same but also changes the
 *   background color of div.region-content.
 *
 * @see field_example_field_formatter_info()
 */
// function voer_field_category_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
//   $element = array();

//   switch ($display['type']) {
//     // This formatter simply outputs the field as text and with a color.
//     case 'field_display_names':
//       foreach ($items as $delta => $item) {
//         $element[$delta] = array(
//           // We create a render array to produce the desired markup,
//           // "<p style="color: #hexcolor">The color code ... #hexcolor</p>".
//           // See theme_html_tag().
//           '#type' => 'html_tag',
//           '#tag' => 'p',
//           '#attributes' => array(
//             'style' => 'color: ' . $item['value'],
//           ),
//           '#value' => t('The color code in this field is @code', array('@code' => $item['value'])),
//         );
//       }
//       break;
//   }

//   return $element;
// }

/**
 * Implements hook_field_widget_info().
 *
 * Three widgets are provided.
 * - A simple text-only widget where the user enters the '#ffffff'.
 * - A 3-textfield widget that gathers the red, green, and blue values
 *   separately.
 * - A farbtastic colorpicker widget that chooses the value graphically.
 *
 * These widget types will eventually show up in hook_field_widget_form,
 * where we will have to flesh them out.
 *
 * @see field_example_field_widget_form()
 */
// function voer_field_category_field_widget_info() {
//   return array(
//     'field_select_categories' => array(
//       'label' => t('Select categories'),
//       'field types' => array('field_voer_categories'),
//     ),
//   );
// }

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 * We provide one of three different forms, depending on the widget type of
 * the Form API item provided.
 *
 * The 'field_example_colorpicker' and 'field_example_text' are essentially
 * the same, but field_example_colorpicker adds a javascript colorpicker
 * helper.
 *
 * field_example_3text displays three text fields, one each for red, green,
 * and blue. However, the field type defines a single text column,
 * rgb, which needs an HTML color spec. Define an element validate
 * handler that converts our r, g, and b fields into a simulated single
 * 'rgb' form element.
 */
// function voer_field_category_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
//   $value = isset($items[$delta]['value']) ? $items[$delta]['value'] : '';
//   $multiple = $field['cardinality'] > 1 || $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED;
//   $required = $element['#required'];

//   $widget = $element;
//   $widget['#delta'] = $delta;

//   // Prepare the list of options.
//   $options = _options_get_options($field, $instance, $properties, $entity_type, $entity);

//   // Put current field values in shape.
//   $default_value = _options_storage_to_form($items, $options, $value_key, $properties);

//   switch ($instance['widget']['type']) {

//     case 'field_select_categories':
//       // If required and there is one single option, preselect it.
//       if ($required && count($options) == 1) {
//         reset($options);
//         $default_value = array(key($options));
//       }

//       // If this is a single-value field, take the first default value, or
//       // default to NULL so that the form element is properly recognized as
//       // not having a default value.
//       if (!$multiple) {
//         $default_value = $default_value ? reset($default_value) : NULL;
//       }

//       $element += array(
//         '#type' => $multiple ? 'checkboxes' : 'radios',

//         // Radio buttons need a scalar value.
//         '#default_value' => $default_value,
//         '#options' => $options,
//       );
//       break;

//   }

//   // $element['value'] = $widget;
//   return $element;
// }

/**
 * Implements hook_menu().
 *
 * Provides a simple user interface that tells the developer where to go.
 */
// function field_example_menu() {
//   $items['examples/field_example'] = array(
//     'title' => 'Field Example',
//     'page callback' => '_field_example_page',
//     'access callback' => TRUE,
//   );
//   return $items;
// }

/**
 * @} End of "defgroup field_example".
 */
