<?php
define('VOER_MATERIAL_TYPE_TEXT', 1);
define('VOER_MATERIAL_TYPE_VIDEO', 2);

define('VOER_MATERIAL_LICENSE_FORM', 'material_license_form');
define('VOER_MATERIAL_METADATA_FORM', 'material_metadata_form');
define('VOER_MATERIAL_CONTENT_FORM', 'material_content_form');

/**
 * Implements hook_form_alter().
 */
function voer_content_form_alter(&$form, &$form_state, $form_id) {
  $node = new stdClass();

  if (arg(0) == 'node') {
    $nid = arg(1);

    if ($nid) {
      $node = node_load($nid);
    }
  }

  if ($form_id == 'voer_content_node_form') {
    if (empty($form_state['step'])) {
      $form_state['step'] = 1;
      $form_state['step_infor'] = _voer_content_material_form_steps();
    }
// dpm($form_state);
    $step = &$form_state['step'];

    if ($step < count($form_state['step_infor']) && empty($node->nid)) {
      $form = $form_state['step_infor'][$step]['form']($form, $form_state);

    } else {
      global $user;

      //hide if user has not roles
      if (!in_array('administrator', $user->roles)) {
        $form['menu']['#access'] = FALSE;
        $form['revision_information']['#access'] = false;
        $form['options']['#access'] = false;
        $form['comment_settings']['#access'] = false;
        $form['author']['#access'] = false;
        $form['path']['#access'] = false;
      }

      $form['material_content_form'] = array(
        '#type' => 'fieldset',
        '#title' => t('Metadata'),
        '#group' => 'additional_settings',
        '#weight' => -10,
      );

      $form['material_content_form']['title'] = $form['title'];
      $form['material_content_form']['field_language'] = $form['field_language'];
      $form['material_content_form']['field_category'] = $form['field_category'];
      $form['material_content_form']['field_keyword'] = $form['field_keyword'];
      $form['material_content_form']['field_summary'] = $form['field_summary'];
      $form['material_content_form']['field_id'] = $form['field_id'];
      $form['material_content_form']['field_version'] = $form['field_version'];

      unset($form['title']);
      unset($form['field_language']);
      unset($form['field_category']);
      unset($form['field_keyword']);
      unset($form['field_summary']);
      unset($form['field_id']);
      unset($form['field_version']);

      $form['actions']['commit'] = array(
        '#type'=> 'submit',
        '#value'=> 'Commit',
        '#weight'=> 11,
        '#submit' => array('voer_content_form_push'),
      );
    }
  }

  return $form;
}

/**
 * post data to server
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function voer_content_form_push($form, &$form_state)
{
  global $user;

  $node = new stdClass();

  if (arg(0) == 'node') {
    $nid = arg(1);

    if ($nid) {
      $node = node_load($nid);
    }
  }

  $mod_data = array();
  $mod_data['title'] = $form_state['values']['title'];
  $mod_data['text'] = $form_state['values']['body'][LANGUAGE_NONE][0]['value'];
  $mod_data['language'] = $form_state['values']['field_language'][LANGUAGE_NONE][0]['value'];
  $mod_data['description'] = $form_state['values']['field_summary'][LANGUAGE_NONE][0]['value'];
  $mod_data['categories'] = '1, 2, 3';
  $mod_data['authors'] = $user->uid;
  $mod_data['editor_id'] = 1;
  $mod_data['keywords'] = 'hello, test';
  $mod_data['license_id'] = '3';
  $mod_data['material_type'] = VOER_MATERIAL_TYPE_TEXT;
  $mod_data['file'] = '';
  $mod_data['file_type'] = '';
  $mod_data['derived_from'] = 1;

  module_load_include('inc', 'voer_api');

  if (isset($node->nid) && $form_state['values']['field_id'][LANGUAGE_NONE][0]['value']) {
    $mod_data['material_id'] = $form_state['values']['field_id'][LANGUAGE_NONE][0]['value'];
    $result = voer_api_checkin_material($mod_data);
    unset($node->nid);
    unset($node->vid);

  } else {
    $result = voer_api_create_material((object)$mod_data);
  }

  if ($result && $result->material_id) {
    $node->title = $result->title;
    $node->uid = $mod_data['authors'];
    $node->body = $form_state['values']['body'];
    $node->type = 'voer_content';
    $node->language = LANGUAGE_NONE;
    // $node->created = $result->modified;
    $node->status = 1;
    $node->promote = 1;

    $node->field_keyword = $form_state['values']['field_keyword'];
    $node->field_language = $form_state['values']['field_language'];
    $node->field_summary = $form_state['values']['field_summary'];
    $node->field_category = $form_state['values']['field_category'];
    $node->field_id[LANGUAGE_NONE][0]['value'] = $result->material_id;
    $node->field_version[LANGUAGE_NONE][0]['value'] = $result->version;

    node_submit($node);
    node_save($node);

    drupal_set_message('Commit data to server successfull');

    drupal_goto('node/' . $node->nid);
  }
}

/**
 * Implements hook_menu().
 */
function voer_content_menu() {
  $items = array();

  $items['materials'] = array(
    'title' => t('Material list'),
    'page callback' => 'voer_content_material_list',
    'access arguments' => array('view VOER content'),
  );

  $items['material/%'] = array(
    'title' => t('Versions of material'),
    'page callback' => 'voer_content_material_version_list',
    'page arguments' => array(1),
    'access arguments' => array('view VOER content'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['material/%/%'] = array(
    'title' => t('Material detail'),
    'page callback' => 'voer_content_view_material',
    'access arguments' => array('view VOER content'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['voer-content/archive-form'] = array(
    'title' => t('Upload form'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('extract_zip_form'),
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * [voer_content_view_material description]
 * @return object          [description]
 */
function voer_content_view_material()
{
  $material_id = arg(1);
  $version = arg(2);

  if (!$version) {
    $version = '';
  }

  $material = array();

  $node_id = _voer_content_get_data($material_id, $version);

  if (!$node_id) {
    module_load_include('inc', 'voer_api');
    $material = voer_api_get_content($material_id, $version);

    if (isset($material['material_id'])) {
      $node_id = _voer_content_save_node($material);
    }
  }

  if (!$node_id) {
    return drupal_not_found();
  }

  return drupal_render(node_view(node_load($node_id)));
}

/**
 * [_voer_content_save_node description]
 *
 * @param array $material [description]
 * @return int       [description]
 */
function _voer_content_save_node($material)
{
  $node = new stdClass();
  $node->title = $material['title'];
  $node->uid = $material['authors'];
  $node->body[LANGUAGE_NONE][0]['value'] = $material['text'];
  $node->body[LANGUAGE_NONE][0]['format'] = 'full_html';
  $node->type = 'voer_content';
  $node->language = LANGUAGE_NONE;
  $node->status = 1;
  $node->promote = 1;

  $node->field_keyword[LANGUAGE_NONE][0]['value'] = $material['keywords'];
  $node->field_language[LANGUAGE_NONE][0]['value'] = $material['language'];
  $node->field_summary[LANGUAGE_NONE][0]['value'] = $material['description'];
  $node->field_category[LANGUAGE_NONE][0]['value'] = $material['categories'];
  $node->field_id[LANGUAGE_NONE][0]['value'] = $material['material_id'];
  $node->field_version[LANGUAGE_NONE][0]['value'] = $material['version'];

  node_submit($node);
  node_save($node);

  return $node->nid;
}

function voer_content_material_list()
{
  global $user;

  module_load_include('inc', 'voer_api');
  $material_list = voer_api_get_materials_by_authors(array($user->uid));

  if ($material_list['results']) {
    $items = array();

    foreach ($material_list['results'] as $key => $value) {
      $items[] = l($value['title'], 'material/' . $value['material_id']);
    }

    return theme('item_list', array('items' => $items));

  } else {
    return drupal_not_found();
  }
}

/**
 * [voer_content_material_version_list description]
 *
 * @param  int $material_id [description]
 * @return [type]              [description]
 */
function voer_content_material_version_list($material_id)
{
  module_load_include('inc', 'voer_api');
  $version_list = voer_api_get_materials_by_id($material_id);

  if ($version_list->results) {
    $materials = array();

    foreach ($version_list->results as $key => $material_info) {
      $materials[] = l($material_info->title, sprintf('material/%s/%s', $material_info->material_id, $material_info->version));
    }

    return theme('item_list', array('items' => $materials));

  } else {
    return drupal_not_found();
  }
}

/**
 * [_voer_content_get_data description]
 *
 * @param  int $material_id     [description]
 * @param  int $version      [description]
 * @return object            [description]
 */
function _voer_content_get_data($material_id, $version)
{
  $sql = "SELECT node.nid AS nid "
        ."FROM {node} AS node "
        ."LEFT JOIN {field_data_field_id} field_data_field_id ON node.nid = field_data_field_id.entity_id AND (field_data_field_id.entity_type = 'node' AND field_data_field_id.deleted = '0') "
        ."LEFT JOIN {field_data_field_version} field_data_field_version ON node.nid = field_data_field_version.entity_id AND (field_data_field_version.entity_type = 'node' AND field_data_field_version.deleted = '0') "
        ."WHERE node.status = '1' "
        ."AND node.type IN  ('voer_content') "
        ."AND field_data_field_id.field_id_value LIKE :material_id "
        ."AND field_data_field_version.field_version_value LIKE :version";

  $node_id = db_query($sql, array(':material_id' => $material_id, ':version' => $version))->fetchField();

  return $node_id;
}

/**
 * Create a new form accpet license.
 *
 * @return form
 */
function material_license_form(&$form, &$form_state) {
  unset($_SESSION['material_data']);

  unset($form['title']);
  unset($form['body']);
  unset($form['field_category']);
  unset($form['field_language']);
  unset($form['field_keyword']);
  unset($form['field_summary']);
  unset($form['field_id']);
  unset($form['field_version']);

  $form['additional_settings']['#access'] = FALSE;
  $form['actions']['#access'] = FALSE;

  $form['material_license_form'] = array(
    '#type' => 'fieldset',
    '#title' => 'License agreement',
    '#collapsible' => TRUE,
  );

  $form['material_license_form']['license_text'] = array(
    '#type' => 'textarea',
    '#value' => t('I recently played the role of Information Architect on a site remodel. We were charged with the task of doing a brand new build to replace an existing Flash site. One of the priorities of the client was to retain the elaborate Request for Quote form. There were many, many form fields that comprised this web form so I began to ponder if we should break the form up into a multiple step form, to improve the overall user experience. After careful consideration, I decided that we should definitely split the form up (for more on this matter check out Pagination in Web Forms | Evaluating the Effectiveness of Web Forms on UXmatter.com). Since there was no logic needed in the progression of the form, I felt that Javascript would be an acceptable solution, over using an actual server-side wizard. Thanks to Janko and his Turn any webform into a powerful wizard with jQuery blog, I found his JQuery plugin very easy to implement. This tutorial assumes that you have some basic working knowledge of the Webform module and how to create a custom module of your own.'),
    '#weight' => 0,
    '#disabled' => TRUE,
    '#resizable' => FALSE,
    '#attributes' => array(
      'class' => array('license_text'),
    )
  );

  $form['material_license_form']['accept_license'] = array(
    '#type' => 'checkbox',
    '#title' => t('I have read the above, and I agree to license this new work under its terms.'),
    '#required' => TRUE,
  );

  $form['material_license_form']['submit_license'] = array(
    '#type' => 'submit',
    '#value' => t('Next »'),
    '#submit' => array('material_form_submit'),
  );

  return $form;
}

/**
 * Create a new form input metadata for material.
 *
 * @return form
 */
function material_metadata_form(&$form, &$form_state)
{
  unset($form['body']);
  unset($form['field_id']);
  unset($form['field_version']);

  $form['additional_settings']['#access'] = FALSE;
  $form['actions']['#access'] = FALSE;

  $form['submit_metadata'] = array(
    '#type' => 'submit',
    '#value' => t('Next »'),
    '#submit' => array('material_form_submit'),
    '#weight' => 10,
  );

  return $form;
}

function material_form_submit($form, &$form_state)
{
  $current_step = &$form_state['step'];
  $form_state['step_infor'][$current_step]['stored_values'] = $form_state['values'];

  if ($current_step < count($form_state['step_infor'])) {
    $current_step++;

    if (!empty($form_state['step_infor'][$current_step]['stored_values'])) {
      $form_state['values'] = $form_state['step_infor'][$current_step]['stored_values'];
    } else {
      $form_state['values'] = array();
    }

    $form_state['rebuild'] = TRUE;
    return;
  }
}

function _voer_content_material_form_steps() {
  return array(
    1 => array(
      'form' => VOER_MATERIAL_LICENSE_FORM,
    ),
    2 => array(
      'form' => VOER_MATERIAL_METADATA_FORM,
    ),
    3 => array(
      'form' => VOER_MATERIAL_CONTENT_FORM,
    ),
  );
}

function extract_zip_form()
{
  $form = array();

  $form['archive_form'] = array(
    '#type' => 'fieldset',
    '#title' => 'Đính kèm file',
    '#collapsible' => TRUE,
  );

  $form['archive_form']['file_luong'] = array(
    '#type' => 'file',
    '#title' => t('Chọn file'),
    '#description' => t('Pick a video file to upload.'),
  );

  $form['archive_form']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Tải lên'),
  );

  return $form;
}

function extract_zip_form_submit($form, &$form_state)
{
  $filepath = 'temporary://test/';
  file_prepare_directory($filepath, FILE_CREATE_DIRECTORY);
  $file = file_save_upload('file_luong', array('file_validate_extensions' => array('zip')), $filepath);

  $file_name = $file->filename;
  echo $file_name;
  open_file_zip($file_name);die;
}

function open_file_zip($file_name) {
  $filepath = drupal_realpath('temporary://test/');

  $zip = zip_open($filepath . '/' . $file_name);

  do {
    $entry = zip_read($zip);
  } while ($entry && FALSE === strpos(zip_entry_name($entry), 'index.cnxml'));

  zip_entry_open($zip, $entry);

  $entryContent = zip_entry_read($entry, zip_entry_filesize($entry));

  $xml = simplexml_load_string($entryContent);

  echo '<h1>' . $xml->title . '</h1>';

  zip_entry_close($entry);
  zip_close($zip);
}
